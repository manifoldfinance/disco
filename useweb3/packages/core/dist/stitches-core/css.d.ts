export {};
export interface StandardLonghandProperties {
    alignContent?: Property.AlignContent;
    alignItems?: Property.AlignItems;
    alignSelf?: Property.AlignSelf;
    alignTracks?: Property.AlignTracks;
    animationDelay?: Property.AnimationDelay;
    animationDirection?: Property.AnimationDirection;
    animationDuration?: Property.AnimationDuration;
    animationFillMode?: Property.AnimationFillMode;
    animationIterationCount?: Property.AnimationIterationCount;
    animationName?: Property.AnimationName;
    animationPlayState?: Property.AnimationPlayState;
    animationTimingFunction?: Property.AnimationTimingFunction;
    appearance?: Property.Appearance;
    aspectRatio?: Property.AspectRatio;
    backdropFilter?: Property.BackdropFilter;
    backfaceVisibility?: Property.BackfaceVisibility;
    backgroundAttachment?: Property.BackgroundAttachment;
    backgroundBlendMode?: Property.BackgroundBlendMode;
    backgroundClip?: Property.BackgroundClip;
    backgroundColor?: Property.BackgroundColor;
    backgroundImage?: Property.BackgroundImage;
    backgroundOrigin?: Property.BackgroundOrigin;
    backgroundPositionX?: Property.BackgroundPositionX;
    backgroundPositionY?: Property.BackgroundPositionY;
    backgroundRepeat?: Property.BackgroundRepeat;
    backgroundSize?: Property.BackgroundSize;
    blockOverflow?: Property.BlockOverflow;
    blockSize?: Property.BlockSize;
    borderBlockColor?: Property.BorderBlockColor;
    borderBlockEndColor?: Property.BorderBlockEndColor;
    borderBlockEndStyle?: Property.BorderBlockEndStyle;
    borderBlockEndWidth?: Property.BorderBlockEndWidth;
    borderBlockStartColor?: Property.BorderBlockStartColor;
    borderBlockStartStyle?: Property.BorderBlockStartStyle;
    borderBlockStartWidth?: Property.BorderBlockStartWidth;
    borderBlockStyle?: Property.BorderBlockStyle;
    borderBlockWidth?: Property.BorderBlockWidth;
    borderBottomColor?: Property.BorderBottomColor;
    borderBottomLeftRadius?: Property.BorderBottomLeftRadius;
    borderBottomRightRadius?: Property.BorderBottomRightRadius;
    borderBottomStyle?: Property.BorderBottomStyle;
    borderBottomWidth?: Property.BorderBottomWidth;
    borderCollapse?: Property.BorderCollapse;
    borderEndEndRadius?: Property.BorderEndEndRadius;
    borderEndStartRadius?: Property.BorderEndStartRadius;
    borderImageOutset?: Property.BorderImageOutset;
    borderImageRepeat?: Property.BorderImageRepeat;
    borderImageSlice?: Property.BorderImageSlice;
    borderImageSource?: Property.BorderImageSource;
    borderImageWidth?: Property.BorderImageWidth;
    borderInlineColor?: Property.BorderInlineColor;
    borderInlineEndColor?: Property.BorderInlineEndColor;
    borderInlineEndStyle?: Property.BorderInlineEndStyle;
    borderInlineEndWidth?: Property.BorderInlineEndWidth;
    borderInlineStartColor?: Property.BorderInlineStartColor;
    borderInlineStartStyle?: Property.BorderInlineStartStyle;
    borderInlineStartWidth?: Property.BorderInlineStartWidth;
    borderInlineStyle?: Property.BorderInlineStyle;
    borderInlineWidth?: Property.BorderInlineWidth;
    borderLeftColor?: Property.BorderLeftColor;
    borderLeftStyle?: Property.BorderLeftStyle;
    borderLeftWidth?: Property.BorderLeftWidth;
    borderRightColor?: Property.BorderRightColor;
    borderRightStyle?: Property.BorderRightStyle;
    borderRightWidth?: Property.BorderRightWidth;
    borderSpacing?: Property.BorderSpacing;
    borderStartEndRadius?: Property.BorderStartEndRadius;
    borderStartStartRadius?: Property.BorderStartStartRadius;
    borderTopColor?: Property.BorderTopColor;
    borderTopLeftRadius?: Property.BorderTopLeftRadius;
    borderTopRightRadius?: Property.BorderTopRightRadius;
    borderTopStyle?: Property.BorderTopStyle;
    borderTopWidth?: Property.BorderTopWidth;
    bottom?: Property.Bottom;
    boxDecorationBreak?: Property.BoxDecorationBreak;
    boxShadow?: Property.BoxShadow;
    boxSizing?: Property.BoxSizing;
    breakAfter?: Property.BreakAfter;
    breakBefore?: Property.BreakBefore;
    breakInside?: Property.BreakInside;
    captionSide?: Property.CaptionSide;
    caretColor?: Property.CaretColor;
    clear?: Property.Clear;
    clipPath?: Property.ClipPath;
    color?: Property.Color;
    colorAdjust?: Property.ColorAdjust;
    colorScheme?: Property.ColorScheme;
    columnCount?: Property.ColumnCount;
    columnFill?: Property.ColumnFill;
    columnGap?: Property.ColumnGap;
    columnRuleColor?: Property.ColumnRuleColor;
    columnRuleStyle?: Property.ColumnRuleStyle;
    columnRuleWidth?: Property.ColumnRuleWidth;
    columnSpan?: Property.ColumnSpan;
    columnWidth?: Property.ColumnWidth;
    contain?: Property.Contain;
    content?: Property.Content;
    contentVisibility?: Property.ContentVisibility;
    counterIncrement?: Property.CounterIncrement;
    counterReset?: Property.CounterReset;
    counterSet?: Property.CounterSet;
    cursor?: Property.Cursor;
    direction?: Property.Direction;
    display?: Property.Display;
    emptyCells?: Property.EmptyCells;
    filter?: Property.Filter;
    flexBasis?: Property.FlexBasis;
    flexDirection?: Property.FlexDirection;
    flexGrow?: Property.FlexGrow;
    flexShrink?: Property.FlexShrink;
    flexWrap?: Property.FlexWrap;
    float?: Property.Float;
    fontFamily?: Property.FontFamily;
    fontFeatureSettings?: Property.FontFeatureSettings;
    fontKerning?: Property.FontKerning;
    fontLanguageOverride?: Property.FontLanguageOverride;
    fontOpticalSizing?: Property.FontOpticalSizing;
    fontSize?: Property.FontSize;
    fontSizeAdjust?: Property.FontSizeAdjust;
    fontSmooth?: Property.FontSmooth;
    fontStretch?: Property.FontStretch;
    fontStyle?: Property.FontStyle;
    fontSynthesis?: Property.FontSynthesis;
    fontVariant?: Property.FontVariant;
    fontVariantCaps?: Property.FontVariantCaps;
    fontVariantEastAsian?: Property.FontVariantEastAsian;
    fontVariantLigatures?: Property.FontVariantLigatures;
    fontVariantNumeric?: Property.FontVariantNumeric;
    fontVariantPosition?: Property.FontVariantPosition;
    fontVariationSettings?: Property.FontVariationSettings;
    fontWeight?: Property.FontWeight;
    forcedColorAdjust?: Property.ForcedColorAdjust;
    gridAutoColumns?: Property.GridAutoColumns;
    gridAutoFlow?: Property.GridAutoFlow;
    gridAutoRows?: Property.GridAutoRows;
    gridColumnEnd?: Property.GridColumnEnd;
    gridColumnStart?: Property.GridColumnStart;
    gridRowEnd?: Property.GridRowEnd;
    gridRowStart?: Property.GridRowStart;
    gridTemplateAreas?: Property.GridTemplateAreas;
    gridTemplateColumns?: Property.GridTemplateColumns;
    gridTemplateRows?: Property.GridTemplateRows;
    hangingPunctuation?: Property.HangingPunctuation;
    height?: Property.Height;
    hyphens?: Property.Hyphens;
    imageOrientation?: Property.ImageOrientation;
    imageRendering?: Property.ImageRendering;
    imageResolution?: Property.ImageResolution;
    initialLetter?: Property.InitialLetter;
    inlineSize?: Property.InlineSize;
    inset?: Property.Inset;
    insetBlock?: Property.InsetBlock;
    insetBlockEnd?: Property.InsetBlockEnd;
    insetBlockStart?: Property.InsetBlockStart;
    insetInline?: Property.InsetInline;
    insetInlineEnd?: Property.InsetInlineEnd;
    insetInlineStart?: Property.InsetInlineStart;
    isolation?: Property.Isolation;
    justifyContent?: Property.JustifyContent;
    justifyItems?: Property.JustifyItems;
    justifySelf?: Property.JustifySelf;
    justifyTracks?: Property.JustifyTracks;
    left?: Property.Left;
    letterSpacing?: Property.LetterSpacing;
    lineBreak?: Property.LineBreak;
    lineHeight?: Property.LineHeight;
    lineHeightStep?: Property.LineHeightStep;
    listStyleImage?: Property.ListStyleImage;
    listStylePosition?: Property.ListStylePosition;
    listStyleType?: Property.ListStyleType;
    marginBlock?: Property.MarginBlock;
    marginBlockEnd?: Property.MarginBlockEnd;
    marginBlockStart?: Property.MarginBlockStart;
    marginBottom?: Property.MarginBottom;
    marginInline?: Property.MarginInline;
    marginInlineEnd?: Property.MarginInlineEnd;
    marginInlineStart?: Property.MarginInlineStart;
    marginLeft?: Property.MarginLeft;
    marginRight?: Property.MarginRight;
    marginTop?: Property.MarginTop;
    maskBorderMode?: Property.MaskBorderMode;
    maskBorderOutset?: Property.MaskBorderOutset;
    maskBorderRepeat?: Property.MaskBorderRepeat;
    maskBorderSlice?: Property.MaskBorderSlice;
    maskBorderSource?: Property.MaskBorderSource;
    maskBorderWidth?: Property.MaskBorderWidth;
    maskClip?: Property.MaskClip;
    maskComposite?: Property.MaskComposite;
    maskImage?: Property.MaskImage;
    maskMode?: Property.MaskMode;
    maskOrigin?: Property.MaskOrigin;
    maskPosition?: Property.MaskPosition;
    maskRepeat?: Property.MaskRepeat;
    maskSize?: Property.MaskSize;
    maskType?: Property.MaskType;
    mathStyle?: Property.MathStyle;
    maxBlockSize?: Property.MaxBlockSize;
    maxHeight?: Property.MaxHeight;
    maxInlineSize?: Property.MaxInlineSize;
    maxLines?: Property.MaxLines;
    maxWidth?: Property.MaxWidth;
    minBlockSize?: Property.MinBlockSize;
    minHeight?: Property.MinHeight;
    minInlineSize?: Property.MinInlineSize;
    minWidth?: Property.MinWidth;
    mixBlendMode?: Property.MixBlendMode;
    motionDistance?: Property.OffsetDistance;
    motionPath?: Property.OffsetPath;
    motionRotation?: Property.OffsetRotate;
    objectFit?: Property.ObjectFit;
    objectPosition?: Property.ObjectPosition;
    offsetAnchor?: Property.OffsetAnchor;
    offsetDistance?: Property.OffsetDistance;
    offsetPath?: Property.OffsetPath;
    offsetRotate?: Property.OffsetRotate;
    offsetRotation?: Property.OffsetRotate;
    opacity?: Property.Opacity;
    order?: Property.Order;
    orphans?: Property.Orphans;
    outlineColor?: Property.OutlineColor;
    outlineOffset?: Property.OutlineOffset;
    outlineStyle?: Property.OutlineStyle;
    outlineWidth?: Property.OutlineWidth;
    overflowAnchor?: Property.OverflowAnchor;
    overflowBlock?: Property.OverflowBlock;
    overflowClipBox?: Property.OverflowClipBox;
    overflowClipMargin?: Property.OverflowClipMargin;
    overflowInline?: Property.OverflowInline;
    overflowWrap?: Property.OverflowWrap;
    overflowX?: Property.OverflowX;
    overflowY?: Property.OverflowY;
    overscrollBehaviorBlock?: Property.OverscrollBehaviorBlock;
    overscrollBehaviorInline?: Property.OverscrollBehaviorInline;
    overscrollBehaviorX?: Property.OverscrollBehaviorX;
    overscrollBehaviorY?: Property.OverscrollBehaviorY;
    paddingBlock?: Property.PaddingBlock;
    paddingBlockEnd?: Property.PaddingBlockEnd;
    paddingBlockStart?: Property.PaddingBlockStart;
    paddingBottom?: Property.PaddingBottom;
    paddingInline?: Property.PaddingInline;
    paddingInlineEnd?: Property.PaddingInlineEnd;
    paddingInlineStart?: Property.PaddingInlineStart;
    paddingLeft?: Property.PaddingLeft;
    paddingRight?: Property.PaddingRight;
    paddingTop?: Property.PaddingTop;
    pageBreakAfter?: Property.PageBreakAfter;
    pageBreakBefore?: Property.PageBreakBefore;
    pageBreakInside?: Property.PageBreakInside;
    paintOrder?: Property.PaintOrder;
    perspective?: Property.Perspective;
    perspectiveOrigin?: Property.PerspectiveOrigin;
    placeContent?: Property.PlaceContent;
    pointerEvents?: Property.PointerEvents;
    position?: Property.Position;
    quotes?: Property.Quotes;
    resize?: Property.Resize;
    right?: Property.Right;
    rotate?: Property.Rotate;
    rowGap?: Property.RowGap;
    rubyAlign?: Property.RubyAlign;
    rubyMerge?: Property.RubyMerge;
    rubyPosition?: Property.RubyPosition;
    scale?: Property.Scale;
    scrollBehavior?: Property.ScrollBehavior;
    scrollMargin?: Property.ScrollMargin;
    scrollMarginBlock?: Property.ScrollMarginBlock;
    scrollMarginBlockEnd?: Property.ScrollMarginBlockEnd;
    scrollMarginBlockStart?: Property.ScrollMarginBlockStart;
    scrollMarginBottom?: Property.ScrollMarginBottom;
    scrollMarginInline?: Property.ScrollMarginInline;
    scrollMarginInlineEnd?: Property.ScrollMarginInlineEnd;
    scrollMarginInlineStart?: Property.ScrollMarginInlineStart;
    scrollMarginLeft?: Property.ScrollMarginLeft;
    scrollMarginRight?: Property.ScrollMarginRight;
    scrollMarginTop?: Property.ScrollMarginTop;
    scrollPadding?: Property.ScrollPadding;
    scrollPaddingBlock?: Property.ScrollPaddingBlock;
    scrollPaddingBlockEnd?: Property.ScrollPaddingBlockEnd;
    scrollPaddingBlockStart?: Property.ScrollPaddingBlockStart;
    scrollPaddingBottom?: Property.ScrollPaddingBottom;
    scrollPaddingInline?: Property.ScrollPaddingInline;
    scrollPaddingInlineEnd?: Property.ScrollPaddingInlineEnd;
    scrollPaddingInlineStart?: Property.ScrollPaddingInlineStart;
    scrollPaddingLeft?: Property.ScrollPaddingLeft;
    scrollPaddingRight?: Property.ScrollPaddingRight;
    scrollPaddingTop?: Property.ScrollPaddingTop;
    scrollSnapAlign?: Property.ScrollSnapAlign;
    scrollSnapMargin?: Property.ScrollMargin;
    scrollSnapMarginBottom?: Property.ScrollMarginBottom;
    scrollSnapMarginLeft?: Property.ScrollMarginLeft;
    scrollSnapMarginRight?: Property.ScrollMarginRight;
    scrollSnapMarginTop?: Property.ScrollMarginTop;
    scrollSnapStop?: Property.ScrollSnapStop;
    scrollSnapType?: Property.ScrollSnapType;
    scrollbarColor?: Property.ScrollbarColor;
    scrollbarGutter?: Property.ScrollbarGutter;
    scrollbarWidth?: Property.ScrollbarWidth;
    shapeImageThreshold?: Property.ShapeImageThreshold;
    shapeMargin?: Property.ShapeMargin;
    shapeOutside?: Property.ShapeOutside;
    tabSize?: Property.TabSize;
    tableLayout?: Property.TableLayout;
    textAlign?: Property.TextAlign;
    textAlignLast?: Property.TextAlignLast;
    textCombineUpright?: Property.TextCombineUpright;
    textDecorationColor?: Property.TextDecorationColor;
    textDecorationLine?: Property.TextDecorationLine;
    textDecorationSkip?: Property.TextDecorationSkip;
    textDecorationSkipInk?: Property.TextDecorationSkipInk;
    textDecorationStyle?: Property.TextDecorationStyle;
    textDecorationThickness?: Property.TextDecorationThickness;
    textDecorationWidth?: Property.TextDecorationThickness;
    textEmphasisColor?: Property.TextEmphasisColor;
    textEmphasisPosition?: Property.TextEmphasisPosition;
    textEmphasisStyle?: Property.TextEmphasisStyle;
    textIndent?: Property.TextIndent;
    textJustify?: Property.TextJustify;
    textOrientation?: Property.TextOrientation;
    textOverflow?: Property.TextOverflow;
    textRendering?: Property.TextRendering;
    textShadow?: Property.TextShadow;
    textSizeAdjust?: Property.TextSizeAdjust;
    textTransform?: Property.TextTransform;
    textUnderlineOffset?: Property.TextUnderlineOffset;
    textUnderlinePosition?: Property.TextUnderlinePosition;
    top?: Property.Top;
    touchAction?: Property.TouchAction;
    transform?: Property.Transform;
    transformBox?: Property.TransformBox;
    transformOrigin?: Property.TransformOrigin;
    transformStyle?: Property.TransformStyle;
    transitionDelay?: Property.TransitionDelay;
    transitionDuration?: Property.TransitionDuration;
    transitionProperty?: Property.TransitionProperty;
    transitionTimingFunction?: Property.TransitionTimingFunction;
    translate?: Property.Translate;
    unicodeBidi?: Property.UnicodeBidi;
    userSelect?: Property.UserSelect;
    verticalAlign?: Property.VerticalAlign;
    visibility?: Property.Visibility;
    whiteSpace?: Property.WhiteSpace;
    widows?: Property.Widows;
    width?: Property.Width;
    willChange?: Property.WillChange;
    wordBreak?: Property.WordBreak;
    wordSpacing?: Property.WordSpacing;
    wordWrap?: Property.WordWrap;
    writingMode?: Property.WritingMode;
    zIndex?: Property.ZIndex;
    zoom?: Property.Zoom;
}
export interface StandardShorthandProperties {
    all?: Property.All;
    animation?: Property.Animation;
    background?: Property.Background;
    backgroundPosition?: Property.BackgroundPosition;
    border?: Property.Border;
    borderBlock?: Property.BorderBlock;
    borderBlockEnd?: Property.BorderBlockEnd;
    borderBlockStart?: Property.BorderBlockStart;
    borderBottom?: Property.BorderBottom;
    borderColor?: Property.BorderColor;
    borderImage?: Property.BorderImage;
    borderInline?: Property.BorderInline;
    borderInlineEnd?: Property.BorderInlineEnd;
    borderInlineStart?: Property.BorderInlineStart;
    borderLeft?: Property.BorderLeft;
    borderRadius?: Property.BorderRadius;
    borderRight?: Property.BorderRight;
    borderStyle?: Property.BorderStyle;
    borderTop?: Property.BorderTop;
    borderWidth?: Property.BorderWidth;
    columnRule?: Property.ColumnRule;
    columns?: Property.Columns;
    flex?: Property.Flex;
    flexFlow?: Property.FlexFlow;
    font?: Property.Font;
    gap?: Property.Gap;
    grid?: Property.Grid;
    gridArea?: Property.GridArea;
    gridColumn?: Property.GridColumn;
    gridRow?: Property.GridRow;
    gridTemplate?: Property.GridTemplate;
    lineClamp?: Property.LineClamp;
    listStyle?: Property.ListStyle;
    margin?: Property.Margin;
    mask?: Property.Mask;
    maskBorder?: Property.MaskBorder;
    motion?: Property.Offset;
    offset?: Property.Offset;
    outline?: Property.Outline;
    overflow?: Property.Overflow;
    overscrollBehavior?: Property.OverscrollBehavior;
    padding?: Property.Padding;
    placeItems?: Property.PlaceItems;
    placeSelf?: Property.PlaceSelf;
    textDecoration?: Property.TextDecoration;
    textEmphasis?: Property.TextEmphasis;
    transition?: Property.Transition;
}
export interface StandardProperties extends StandardLonghandProperties, StandardShorthandProperties {
}
export interface SvgProperties {
    alignmentBaseline?: Property.AlignmentBaseline;
    baselineShift?: Property.BaselineShift;
    clip?: Property.Clip;
    clipPath?: Property.ClipPath;
    clipRule?: Property.ClipRule;
    color?: Property.Color;
    colorInterpolation?: Property.ColorInterpolation;
    colorRendering?: Property.ColorRendering;
    cursor?: Property.Cursor;
    direction?: Property.Direction;
    display?: Property.Display;
    dominantBaseline?: Property.DominantBaseline;
    fill?: Property.Fill;
    fillOpacity?: Property.FillOpacity;
    fillRule?: Property.FillRule;
    filter?: Property.Filter;
    floodColor?: Property.FloodColor;
    floodOpacity?: Property.FloodOpacity;
    font?: Property.Font;
    fontFamily?: Property.FontFamily;
    fontSize?: Property.FontSize;
    fontSizeAdjust?: Property.FontSizeAdjust;
    fontStretch?: Property.FontStretch;
    fontStyle?: Property.FontStyle;
    fontVariant?: Property.FontVariant;
    fontWeight?: Property.FontWeight;
    glyphOrientationVertical?: Property.GlyphOrientationVertical;
    imageRendering?: Property.ImageRendering;
    letterSpacing?: Property.LetterSpacing;
    lightingColor?: Property.LightingColor;
    lineHeight?: Property.LineHeight;
    marker?: Property.Marker;
    markerEnd?: Property.MarkerEnd;
    markerMid?: Property.MarkerMid;
    markerStart?: Property.MarkerStart;
    mask?: Property.Mask;
    opacity?: Property.Opacity;
    overflow?: Property.Overflow;
    paintOrder?: Property.PaintOrder;
    pointerEvents?: Property.PointerEvents;
    shapeRendering?: Property.ShapeRendering;
    stopColor?: Property.StopColor;
    stopOpacity?: Property.StopOpacity;
    stroke?: Property.Stroke;
    strokeDasharray?: Property.StrokeDasharray;
    strokeDashoffset?: Property.StrokeDashoffset;
    strokeLinecap?: Property.StrokeLinecap;
    strokeLinejoin?: Property.StrokeLinejoin;
    strokeMiterlimit?: Property.StrokeMiterlimit;
    strokeOpacity?: Property.StrokeOpacity;
    strokeWidth?: Property.StrokeWidth;
    textAnchor?: Property.TextAnchor;
    textDecoration?: Property.TextDecoration;
    textRendering?: Property.TextRendering;
    unicodeBidi?: Property.UnicodeBidi;
    vectorEffect?: Property.VectorEffect;
    visibility?: Property.Visibility;
    whiteSpace?: Property.WhiteSpace;
    wordSpacing?: Property.WordSpacing;
    writingMode?: Property.WritingMode;
}
export interface Properties extends StandardProperties, SvgProperties {
}
export interface StandardLonghandPropertiesHyphen {
    'align-content'?: Property.AlignContent;
    'align-items'?: Property.AlignItems;
    'align-self'?: Property.AlignSelf;
    'align-tracks'?: Property.AlignTracks;
    'animation-delay'?: Property.AnimationDelay;
    'animation-direction'?: Property.AnimationDirection;
    'animation-duration'?: Property.AnimationDuration;
    'animation-fill-mode'?: Property.AnimationFillMode;
    'animation-iteration-count'?: Property.AnimationIterationCount;
    'animation-name'?: Property.AnimationName;
    'animation-play-state'?: Property.AnimationPlayState;
    'animation-timing-function'?: Property.AnimationTimingFunction;
    appearance?: Property.Appearance;
    'aspect-ratio'?: Property.AspectRatio;
    'backdrop-filter'?: Property.BackdropFilter;
    'backface-visibility'?: Property.BackfaceVisibility;
    'background-attachment'?: Property.BackgroundAttachment;
    'background-blend-mode'?: Property.BackgroundBlendMode;
    'background-clip'?: Property.BackgroundClip;
    'background-color'?: Property.BackgroundColor;
    'background-image'?: Property.BackgroundImage;
    'background-origin'?: Property.BackgroundOrigin;
    'background-position-x'?: Property.BackgroundPositionX;
    'background-position-y'?: Property.BackgroundPositionY;
    'background-repeat'?: Property.BackgroundRepeat;
    'background-size'?: Property.BackgroundSize;
    'block-overflow'?: Property.BlockOverflow;
    'block-size'?: Property.BlockSize;
    'border-block-color'?: Property.BorderBlockColor;
    'border-block-end-color'?: Property.BorderBlockEndColor;
    'border-block-end-style'?: Property.BorderBlockEndStyle;
    'border-block-end-width'?: Property.BorderBlockEndWidth;
    'border-block-start-color'?: Property.BorderBlockStartColor;
    'border-block-start-style'?: Property.BorderBlockStartStyle;
    'border-block-start-width'?: Property.BorderBlockStartWidth;
    'border-block-style'?: Property.BorderBlockStyle;
    'border-block-width'?: Property.BorderBlockWidth;
    'border-bottom-color'?: Property.BorderBottomColor;
    'border-bottom-left-radius'?: Property.BorderBottomLeftRadius;
    'border-bottom-right-radius'?: Property.BorderBottomRightRadius;
    'border-bottom-style'?: Property.BorderBottomStyle;
    'border-bottom-width'?: Property.BorderBottomWidth;
    'border-collapse'?: Property.BorderCollapse;
    'border-end-end-radius'?: Property.BorderEndEndRadius;
    'border-end-start-radius'?: Property.BorderEndStartRadius;
    'border-image-outset'?: Property.BorderImageOutset;
    'border-image-repeat'?: Property.BorderImageRepeat;
    'border-image-slice'?: Property.BorderImageSlice;
    'border-image-source'?: Property.BorderImageSource;
    'border-image-width'?: Property.BorderImageWidth;
    'border-inline-color'?: Property.BorderInlineColor;
    'border-inline-end-color'?: Property.BorderInlineEndColor;
    'border-inline-end-style'?: Property.BorderInlineEndStyle;
    'border-inline-end-width'?: Property.BorderInlineEndWidth;
    'border-inline-start-color'?: Property.BorderInlineStartColor;
    'border-inline-start-style'?: Property.BorderInlineStartStyle;
    'border-inline-start-width'?: Property.BorderInlineStartWidth;
    'border-inline-style'?: Property.BorderInlineStyle;
    'border-inline-width'?: Property.BorderInlineWidth;
    'border-left-color'?: Property.BorderLeftColor;
    'border-left-style'?: Property.BorderLeftStyle;
    'border-left-width'?: Property.BorderLeftWidth;
    'border-right-color'?: Property.BorderRightColor;
    'border-right-style'?: Property.BorderRightStyle;
    'border-right-width'?: Property.BorderRightWidth;
    'border-spacing'?: Property.BorderSpacing;
    'border-start-end-radius'?: Property.BorderStartEndRadius;
    'border-start-start-radius'?: Property.BorderStartStartRadius;
    'border-top-color'?: Property.BorderTopColor;
    'border-top-left-radius'?: Property.BorderTopLeftRadius;
    'border-top-right-radius'?: Property.BorderTopRightRadius;
    'border-top-style'?: Property.BorderTopStyle;
    'border-top-width'?: Property.BorderTopWidth;
    bottom?: Property.Bottom;
    'box-decoration-break'?: Property.BoxDecorationBreak;
    'box-shadow'?: Property.BoxShadow;
    'box-sizing'?: Property.BoxSizing;
    'break-after'?: Property.BreakAfter;
    'break-before'?: Property.BreakBefore;
    'break-inside'?: Property.BreakInside;
    'caption-side'?: Property.CaptionSide;
    'caret-color'?: Property.CaretColor;
    clear?: Property.Clear;
    'clip-path'?: Property.ClipPath;
    color?: Property.Color;
    'color-adjust'?: Property.ColorAdjust;
    'color-scheme'?: Property.ColorScheme;
    'column-count'?: Property.ColumnCount;
    'column-fill'?: Property.ColumnFill;
    'column-gap'?: Property.ColumnGap;
    'column-rule-color'?: Property.ColumnRuleColor;
    'column-rule-style'?: Property.ColumnRuleStyle;
    'column-rule-width'?: Property.ColumnRuleWidth;
    'column-span'?: Property.ColumnSpan;
    'column-width'?: Property.ColumnWidth;
    contain?: Property.Contain;
    content?: Property.Content;
    'content-visibility'?: Property.ContentVisibility;
    'counter-increment'?: Property.CounterIncrement;
    'counter-reset'?: Property.CounterReset;
    'counter-set'?: Property.CounterSet;
    cursor?: Property.Cursor;
    direction?: Property.Direction;
    display?: Property.Display;
    'empty-cells'?: Property.EmptyCells;
    filter?: Property.Filter;
    'flex-basis'?: Property.FlexBasis;
    'flex-direction'?: Property.FlexDirection;
    'flex-grow'?: Property.FlexGrow;
    'flex-shrink'?: Property.FlexShrink;
    'flex-wrap'?: Property.FlexWrap;
    float?: Property.Float;
    'font-family'?: Property.FontFamily;
    'font-feature-settings'?: Property.FontFeatureSettings;
    'font-kerning'?: Property.FontKerning;
    'font-language-override'?: Property.FontLanguageOverride;
    'font-optical-sizing'?: Property.FontOpticalSizing;
    'font-size'?: Property.FontSize;
    'font-size-adjust'?: Property.FontSizeAdjust;
    'font-smooth'?: Property.FontSmooth;
    'font-stretch'?: Property.FontStretch;
    'font-style'?: Property.FontStyle;
    'font-synthesis'?: Property.FontSynthesis;
    'font-variant'?: Property.FontVariant;
    'font-variant-caps'?: Property.FontVariantCaps;
    'font-variant-east-asian'?: Property.FontVariantEastAsian;
    'font-variant-ligatures'?: Property.FontVariantLigatures;
    'font-variant-numeric'?: Property.FontVariantNumeric;
    'font-variant-position'?: Property.FontVariantPosition;
    'font-variation-settings'?: Property.FontVariationSettings;
    'font-weight'?: Property.FontWeight;
    'forced-color-adjust'?: Property.ForcedColorAdjust;
    'grid-auto-columns'?: Property.GridAutoColumns;
    'grid-auto-flow'?: Property.GridAutoFlow;
    'grid-auto-rows'?: Property.GridAutoRows;
    'grid-column-end'?: Property.GridColumnEnd;
    'grid-column-start'?: Property.GridColumnStart;
    'grid-row-end'?: Property.GridRowEnd;
    'grid-row-start'?: Property.GridRowStart;
    'grid-template-areas'?: Property.GridTemplateAreas;
    'grid-template-columns'?: Property.GridTemplateColumns;
    'grid-template-rows'?: Property.GridTemplateRows;
    'hanging-punctuation'?: Property.HangingPunctuation;
    height?: Property.Height;
    hyphens?: Property.Hyphens;
    'image-orientation'?: Property.ImageOrientation;
    'image-rendering'?: Property.ImageRendering;
    'image-resolution'?: Property.ImageResolution;
    'initial-letter'?: Property.InitialLetter;
    'inline-size'?: Property.InlineSize;
    inset?: Property.Inset;
    'inset-block'?: Property.InsetBlock;
    'inset-block-end'?: Property.InsetBlockEnd;
    'inset-block-start'?: Property.InsetBlockStart;
    'inset-inline'?: Property.InsetInline;
    'inset-inline-end'?: Property.InsetInlineEnd;
    'inset-inline-start'?: Property.InsetInlineStart;
    isolation?: Property.Isolation;
    'justify-content'?: Property.JustifyContent;
    'justify-items'?: Property.JustifyItems;
    'justify-self'?: Property.JustifySelf;
    'justify-tracks'?: Property.JustifyTracks;
    left?: Property.Left;
    'letter-spacing'?: Property.LetterSpacing;
    'line-break'?: Property.LineBreak;
    'line-height'?: Property.LineHeight;
    'line-height-step'?: Property.LineHeightStep;
    'list-style-image'?: Property.ListStyleImage;
    'list-style-position'?: Property.ListStylePosition;
    'list-style-type'?: Property.ListStyleType;
    'margin-block'?: Property.MarginBlock;
    'margin-block-end'?: Property.MarginBlockEnd;
    'margin-block-start'?: Property.MarginBlockStart;
    'margin-bottom'?: Property.MarginBottom;
    'margin-inline'?: Property.MarginInline;
    'margin-inline-end'?: Property.MarginInlineEnd;
    'margin-inline-start'?: Property.MarginInlineStart;
    'margin-left'?: Property.MarginLeft;
    'margin-right'?: Property.MarginRight;
    'margin-top'?: Property.MarginTop;
    'mask-border-mode'?: Property.MaskBorderMode;
    'mask-border-outset'?: Property.MaskBorderOutset;
    'mask-border-repeat'?: Property.MaskBorderRepeat;
    'mask-border-slice'?: Property.MaskBorderSlice;
    'mask-border-source'?: Property.MaskBorderSource;
    'mask-border-width'?: Property.MaskBorderWidth;
    'mask-clip'?: Property.MaskClip;
    'mask-composite'?: Property.MaskComposite;
    'mask-image'?: Property.MaskImage;
    'mask-mode'?: Property.MaskMode;
    'mask-origin'?: Property.MaskOrigin;
    'mask-position'?: Property.MaskPosition;
    'mask-repeat'?: Property.MaskRepeat;
    'mask-size'?: Property.MaskSize;
    'mask-type'?: Property.MaskType;
    'math-style'?: Property.MathStyle;
    'max-block-size'?: Property.MaxBlockSize;
    'max-height'?: Property.MaxHeight;
    'max-inline-size'?: Property.MaxInlineSize;
    'max-lines'?: Property.MaxLines;
    'max-width'?: Property.MaxWidth;
    'min-block-size'?: Property.MinBlockSize;
    'min-height'?: Property.MinHeight;
    'min-inline-size'?: Property.MinInlineSize;
    'min-width'?: Property.MinWidth;
    'mix-blend-mode'?: Property.MixBlendMode;
    'motion-distance'?: Property.OffsetDistance;
    'motion-path'?: Property.OffsetPath;
    'motion-rotation'?: Property.OffsetRotate;
    'object-fit'?: Property.ObjectFit;
    'object-position'?: Property.ObjectPosition;
    'offset-anchor'?: Property.OffsetAnchor;
    'offset-distance'?: Property.OffsetDistance;
    'offset-path'?: Property.OffsetPath;
    'offset-rotate'?: Property.OffsetRotate;
    'offset-rotation'?: Property.OffsetRotate;
    opacity?: Property.Opacity;
    order?: Property.Order;
    orphans?: Property.Orphans;
    'outline-color'?: Property.OutlineColor;
    'outline-offset'?: Property.OutlineOffset;
    'outline-style'?: Property.OutlineStyle;
    'outline-width'?: Property.OutlineWidth;
    'overflow-anchor'?: Property.OverflowAnchor;
    'overflow-block'?: Property.OverflowBlock;
    'overflow-clip-box'?: Property.OverflowClipBox;
    'overflow-clip-margin'?: Property.OverflowClipMargin;
    'overflow-inline'?: Property.OverflowInline;
    'overflow-wrap'?: Property.OverflowWrap;
    'overflow-x'?: Property.OverflowX;
    'overflow-y'?: Property.OverflowY;
    'overscroll-behavior-block'?: Property.OverscrollBehaviorBlock;
    'overscroll-behavior-inline'?: Property.OverscrollBehaviorInline;
    'overscroll-behavior-x'?: Property.OverscrollBehaviorX;
    'overscroll-behavior-y'?: Property.OverscrollBehaviorY;
    'padding-block'?: Property.PaddingBlock;
    'padding-block-end'?: Property.PaddingBlockEnd;
    'padding-block-start'?: Property.PaddingBlockStart;
    'padding-bottom'?: Property.PaddingBottom;
    'padding-inline'?: Property.PaddingInline;
    'padding-inline-end'?: Property.PaddingInlineEnd;
    'padding-inline-start'?: Property.PaddingInlineStart;
    'padding-left'?: Property.PaddingLeft;
    'padding-right'?: Property.PaddingRight;
    'padding-top'?: Property.PaddingTop;
    'page-break-after'?: Property.PageBreakAfter;
    'page-break-before'?: Property.PageBreakBefore;
    'page-break-inside'?: Property.PageBreakInside;
    'paint-order'?: Property.PaintOrder;
    perspective?: Property.Perspective;
    'perspective-origin'?: Property.PerspectiveOrigin;
    'place-content'?: Property.PlaceContent;
    'pointer-events'?: Property.PointerEvents;
    position?: Property.Position;
    quotes?: Property.Quotes;
    resize?: Property.Resize;
    right?: Property.Right;
    rotate?: Property.Rotate;
    'row-gap'?: Property.RowGap;
    'ruby-align'?: Property.RubyAlign;
    'ruby-merge'?: Property.RubyMerge;
    'ruby-position'?: Property.RubyPosition;
    scale?: Property.Scale;
    'scroll-behavior'?: Property.ScrollBehavior;
    'scroll-margin'?: Property.ScrollMargin;
    'scroll-margin-block'?: Property.ScrollMarginBlock;
    'scroll-margin-block-end'?: Property.ScrollMarginBlockEnd;
    'scroll-margin-block-start'?: Property.ScrollMarginBlockStart;
    'scroll-margin-bottom'?: Property.ScrollMarginBottom;
    'scroll-margin-inline'?: Property.ScrollMarginInline;
    'scroll-margin-inline-end'?: Property.ScrollMarginInlineEnd;
    'scroll-margin-inline-start'?: Property.ScrollMarginInlineStart;
    'scroll-margin-left'?: Property.ScrollMarginLeft;
    'scroll-margin-right'?: Property.ScrollMarginRight;
    'scroll-margin-top'?: Property.ScrollMarginTop;
    'scroll-padding'?: Property.ScrollPadding;
    'scroll-padding-block'?: Property.ScrollPaddingBlock;
    'scroll-padding-block-end'?: Property.ScrollPaddingBlockEnd;
    'scroll-padding-block-start'?: Property.ScrollPaddingBlockStart;
    'scroll-padding-bottom'?: Property.ScrollPaddingBottom;
    'scroll-padding-inline'?: Property.ScrollPaddingInline;
    'scroll-padding-inline-end'?: Property.ScrollPaddingInlineEnd;
    'scroll-padding-inline-start'?: Property.ScrollPaddingInlineStart;
    'scroll-padding-left'?: Property.ScrollPaddingLeft;
    'scroll-padding-right'?: Property.ScrollPaddingRight;
    'scroll-padding-top'?: Property.ScrollPaddingTop;
    'scroll-snap-align'?: Property.ScrollSnapAlign;
    'scroll-snap-margin'?: Property.ScrollMargin;
    'scroll-snap-margin-bottom'?: Property.ScrollMarginBottom;
    'scroll-snap-margin-left'?: Property.ScrollMarginLeft;
    'scroll-snap-margin-right'?: Property.ScrollMarginRight;
    'scroll-snap-margin-top'?: Property.ScrollMarginTop;
    'scroll-snap-stop'?: Property.ScrollSnapStop;
    'scroll-snap-type'?: Property.ScrollSnapType;
    'scrollbar-color'?: Property.ScrollbarColor;
    'scrollbar-gutter'?: Property.ScrollbarGutter;
    'scrollbar-width'?: Property.ScrollbarWidth;
    'shape-image-threshold'?: Property.ShapeImageThreshold;
    'shape-margin'?: Property.ShapeMargin;
    'shape-outside'?: Property.ShapeOutside;
    'tab-size'?: Property.TabSize;
    'table-layout'?: Property.TableLayout;
    'text-align'?: Property.TextAlign;
    'text-align-last'?: Property.TextAlignLast;
    'text-combine-upright'?: Property.TextCombineUpright;
    'text-decoration-color'?: Property.TextDecorationColor;
    'text-decoration-line'?: Property.TextDecorationLine;
    'text-decoration-skip'?: Property.TextDecorationSkip;
    'text-decoration-skip-ink'?: Property.TextDecorationSkipInk;
    'text-decoration-style'?: Property.TextDecorationStyle;
    'text-decoration-thickness'?: Property.TextDecorationThickness;
    'text-decoration-width'?: Property.TextDecorationThickness;
    'text-emphasis-color'?: Property.TextEmphasisColor;
    'text-emphasis-position'?: Property.TextEmphasisPosition;
    'text-emphasis-style'?: Property.TextEmphasisStyle;
    'text-indent'?: Property.TextIndent;
    'text-justify'?: Property.TextJustify;
    'text-orientation'?: Property.TextOrientation;
    'text-overflow'?: Property.TextOverflow;
    'text-rendering'?: Property.TextRendering;
    'text-shadow'?: Property.TextShadow;
    'text-size-adjust'?: Property.TextSizeAdjust;
    'text-transform'?: Property.TextTransform;
    'text-underline-offset'?: Property.TextUnderlineOffset;
    'text-underline-position'?: Property.TextUnderlinePosition;
    top?: Property.Top;
    'touch-action'?: Property.TouchAction;
    transform?: Property.Transform;
    'transform-box'?: Property.TransformBox;
    'transform-origin'?: Property.TransformOrigin;
    'transform-style'?: Property.TransformStyle;
    'transition-delay'?: Property.TransitionDelay;
    'transition-duration'?: Property.TransitionDuration;
    'transition-property'?: Property.TransitionProperty;
    'transition-timing-function'?: Property.TransitionTimingFunction;
    translate?: Property.Translate;
    'unicode-bidi'?: Property.UnicodeBidi;
    'user-select'?: Property.UserSelect;
    'vertical-align'?: Property.VerticalAlign;
    visibility?: Property.Visibility;
    'white-space'?: Property.WhiteSpace;
    widows?: Property.Widows;
    width?: Property.Width;
    'will-change'?: Property.WillChange;
    'word-break'?: Property.WordBreak;
    'word-spacing'?: Property.WordSpacing;
    'word-wrap'?: Property.WordWrap;
    'writing-mode'?: Property.WritingMode;
    'z-index'?: Property.ZIndex;
    zoom?: Property.Zoom;
}
export interface StandardShorthandPropertiesHyphen {
    all?: Property.All;
    animation?: Property.Animation;
    background?: Property.Background;
    'background-position'?: Property.BackgroundPosition;
    border?: Property.Border;
    'border-block'?: Property.BorderBlock;
    'border-block-end'?: Property.BorderBlockEnd;
    'border-block-start'?: Property.BorderBlockStart;
    'border-bottom'?: Property.BorderBottom;
    'border-color'?: Property.BorderColor;
    'border-image'?: Property.BorderImage;
    'border-inline'?: Property.BorderInline;
    'border-inline-end'?: Property.BorderInlineEnd;
    'border-inline-start'?: Property.BorderInlineStart;
    'border-left'?: Property.BorderLeft;
    'border-radius'?: Property.BorderRadius;
    'border-right'?: Property.BorderRight;
    'border-style'?: Property.BorderStyle;
    'border-top'?: Property.BorderTop;
    'border-width'?: Property.BorderWidth;
    'column-rule'?: Property.ColumnRule;
    columns?: Property.Columns;
    flex?: Property.Flex;
    'flex-flow'?: Property.FlexFlow;
    font?: Property.Font;
    gap?: Property.Gap;
    grid?: Property.Grid;
    'grid-area'?: Property.GridArea;
    'grid-column'?: Property.GridColumn;
    'grid-row'?: Property.GridRow;
    'grid-template'?: Property.GridTemplate;
    'line-clamp'?: Property.LineClamp;
    'list-style'?: Property.ListStyle;
    margin?: Property.Margin;
    mask?: Property.Mask;
    'mask-border'?: Property.MaskBorder;
    motion?: Property.Offset;
    offset?: Property.Offset;
    outline?: Property.Outline;
    overflow?: Property.Overflow;
    'overscroll-behavior'?: Property.OverscrollBehavior;
    padding?: Property.Padding;
    'place-items'?: Property.PlaceItems;
    'place-self'?: Property.PlaceSelf;
    'text-decoration'?: Property.TextDecoration;
    'text-emphasis'?: Property.TextEmphasis;
    transition?: Property.Transition;
}
export interface StandardPropertiesHyphen extends StandardLonghandPropertiesHyphen, StandardShorthandPropertiesHyphen {
}
export interface SvgPropertiesHyphen {
    'alignment-baseline'?: Property.AlignmentBaseline;
    'baseline-shift'?: Property.BaselineShift;
    clip?: Property.Clip;
    'clip-path'?: Property.ClipPath;
    'clip-rule'?: Property.ClipRule;
    color?: Property.Color;
    'color-interpolation'?: Property.ColorInterpolation;
    'color-rendering'?: Property.ColorRendering;
    cursor?: Property.Cursor;
    direction?: Property.Direction;
    display?: Property.Display;
    'dominant-baseline'?: Property.DominantBaseline;
    fill?: Property.Fill;
    'fill-opacity'?: Property.FillOpacity;
    'fill-rule'?: Property.FillRule;
    filter?: Property.Filter;
    'flood-color'?: Property.FloodColor;
    'flood-opacity'?: Property.FloodOpacity;
    font?: Property.Font;
    'font-family'?: Property.FontFamily;
    'font-size'?: Property.FontSize;
    'font-size-adjust'?: Property.FontSizeAdjust;
    'font-stretch'?: Property.FontStretch;
    'font-style'?: Property.FontStyle;
    'font-variant'?: Property.FontVariant;
    'font-weight'?: Property.FontWeight;
    'glyph-orientation-vertical'?: Property.GlyphOrientationVertical;
    'image-rendering'?: Property.ImageRendering;
    'letter-spacing'?: Property.LetterSpacing;
    'lighting-color'?: Property.LightingColor;
    'line-height'?: Property.LineHeight;
    marker?: Property.Marker;
    'marker-end'?: Property.MarkerEnd;
    'marker-mid'?: Property.MarkerMid;
    'marker-start'?: Property.MarkerStart;
    mask?: Property.Mask;
    opacity?: Property.Opacity;
    overflow?: Property.Overflow;
    'paint-order'?: Property.PaintOrder;
    'pointer-events'?: Property.PointerEvents;
    'shape-rendering'?: Property.ShapeRendering;
    'stop-color'?: Property.StopColor;
    'stop-opacity'?: Property.StopOpacity;
    stroke?: Property.Stroke;
    'stroke-dasharray'?: Property.StrokeDasharray;
    'stroke-dashoffset'?: Property.StrokeDashoffset;
    'stroke-linecap'?: Property.StrokeLinecap;
    'stroke-linejoin'?: Property.StrokeLinejoin;
    'stroke-miterlimit'?: Property.StrokeMiterlimit;
    'stroke-opacity'?: Property.StrokeOpacity;
    'stroke-width'?: Property.StrokeWidth;
    'text-anchor'?: Property.TextAnchor;
    'text-decoration'?: Property.TextDecoration;
    'text-rendering'?: Property.TextRendering;
    'unicode-bidi'?: Property.UnicodeBidi;
    'vector-effect'?: Property.VectorEffect;
    visibility?: Property.Visibility;
    'white-space'?: Property.WhiteSpace;
    'word-spacing'?: Property.WordSpacing;
    'writing-mode'?: Property.WritingMode;
}
export interface PropertiesHyphen extends StandardPropertiesHyphen, SvgPropertiesHyphen {
}
export declare type StandardLonghandPropertiesFallback = {
    [P in keyof StandardLonghandProperties]: StandardLonghandProperties[P] | StandardLonghandProperties[P][];
};
export declare type StandardShorthandPropertiesFallback = {
    [P in keyof StandardShorthandProperties]: StandardShorthandProperties[P] | StandardShorthandProperties[P][];
};
export interface StandardPropertiesFallback extends StandardLonghandPropertiesFallback, StandardShorthandPropertiesFallback {
}
export declare type SvgPropertiesFallback = {
    [P in keyof SvgProperties]: SvgProperties[P] | SvgProperties[P][];
};
export interface PropertiesFallback extends StandardPropertiesFallback, SvgPropertiesFallback {
}
export declare type StandardLonghandPropertiesHyphenFallback = {
    [P in keyof StandardLonghandPropertiesHyphen]: StandardLonghandPropertiesHyphen[P] | StandardLonghandPropertiesHyphen[P][];
};
export declare type StandardShorthandPropertiesHyphenFallback = {
    [P in keyof StandardShorthandPropertiesHyphen]: StandardShorthandPropertiesHyphen[P] | StandardShorthandPropertiesHyphen[P][];
};
export interface StandardPropertiesHyphenFallback extends StandardLonghandPropertiesHyphenFallback, StandardShorthandPropertiesHyphenFallback {
}
export declare type SvgPropertiesHyphenFallback = {
    [P in keyof SvgPropertiesHyphen]: SvgPropertiesHyphen[P] | SvgPropertiesHyphen[P][];
};
export interface PropertiesHyphenFallback extends StandardPropertiesHyphenFallback, SvgPropertiesHyphenFallback {
}
export declare type AtRules = '@charset' | '@counter-style' | '@document' | '@font-face' | '@font-feature-values' | '@import' | '@keyframes' | '@media' | '@namespace' | '@page' | '@property' | '@supports' | '@viewport';
export declare type AdvancedPseudos = '&::cue(' | '&::cue-region(' | '&::part(' | '&::slotted(' | '&:dir(' | '&:has(' | '&:host(' | '&:host-context(' | '&:is(' | '&:lang(' | '&:not(' | '&:nth-child(' | '&:nth-last-child(' | '&:nth-last-of-type(' | '&:nth-of-type(' | '&:where(';
export declare type SimplePseudos = '&::after' | '&::backdrop' | '&::before' | '&::cue' | '&::cue-region' | '&::first-letter' | '&::first-line' | '&::grammar-error' | '&::marker' | '&::placeholder' | '&::selection' | '&::spelling-error' | '&::target-text' | '&:active' | '&:after' | '&:any-link' | '&:before' | '&:blank' | '&:checked' | '&:current' | '&:default' | '&:defined' | '&:disabled' | '&:empty' | '&:enabled' | '&:first' | '&:first-child' | '&:first-letter' | '&:first-line' | '&:first-of-type' | '&:focus' | '&:focus-visible' | '&:focus-within' | '&:fullscreen' | '&:future' | '&:hover' | '&:in-range' | '&:indeterminate' | '&:invalid' | '&:last-child' | '&:last-of-type' | '&:left' | '&:link' | '&:local-link' | '&:nth-col' | '&:nth-last-col' | '&:only-child' | '&:only-of-type' | '&:optional' | '&:out-of-range' | '&:past' | '&:paused' | '&:picture-in-picture' | '&:placeholder-shown' | '&:read-only' | '&:read-write' | '&:required' | '&:right' | '&:root' | '&:scope' | '&:target' | '&:target-within' | '&:user-invalid' | '&:user-valid' | '&:valid' | '&:visited';
export declare type Pseudos = AdvancedPseudos | SimplePseudos;
export declare type HtmlAttributes = '[abbr]' | '[accept-charset]' | '[accept]' | '[accesskey]' | '[action]' | '[align]' | '[alink]' | '[allow]' | '[allowfullscreen]' | '[allowpaymentrequest]' | '[alt]' | '[archive]' | '[async]' | '[autobuffer]' | '[autocapitalize]' | '[autocomplete]' | '[autofocus]' | '[autoplay]' | '[axis]' | '[background]' | '[behavior]' | '[bgcolor]' | '[border]' | '[bottommargin]' | '[buffered]' | '[cellpadding]' | '[cellspacing]' | '[char]' | '[charoff]' | '[charset]' | '[checked]' | '[cite]' | '[class]' | '[classid]' | '[clear]' | '[code]' | '[codebase]' | '[codetype]' | '[color]' | '[cols]' | '[colspan]' | '[command]' | '[compact]' | '[content]' | '[contenteditable]' | '[contextmenu]' | '[controls]' | '[coords]' | '[crossorigin]' | '[data]' | '[datafld]' | '[datasrc]' | '[datetime]' | '[declare]' | '[decoding]' | '[default]' | '[defer]' | '[dir]' | '[direction]' | '[dirname]' | '[disabled]' | '[download]' | '[draggable]' | '[enctype]' | '[enterkeyhint]' | '[exportparts]' | '[face]' | '[for]' | '[form]' | '[formaction]' | '[formenctype]' | '[formmethod]' | '[formnovalidate]' | '[formtarget]' | '[frame]' | '[frameborder]' | '[headers]' | '[height]' | '[hidden]' | '[high]' | '[href]' | '[hreflang]' | '[hspace]' | '[http-equiv]' | '[icon]' | '[id]' | '[imagesizes]' | '[imagesrcset]' | '[inputmode]' | '[integrity]' | '[intrinsicsize]' | '[is]' | '[ismap]' | '[itemid]' | '[itemprop]' | '[itemref]' | '[itemscope]' | '[itemtype]' | '[kind]' | '[label]' | '[lang]' | '[language]' | '[leftmargin]' | '[link]' | '[loading]' | '[longdesc]' | '[loop]' | '[low]' | '[manifest]' | '[marginheight]' | '[marginwidth]' | '[max]' | '[maxlength]' | '[mayscript]' | '[media]' | '[method]' | '[methods]' | '[min]' | '[minlength]' | '[moz-opaque]' | '[mozallowfullscreen]' | '[mozcurrentsampleoffset]' | '[msallowfullscreen]' | '[multiple]' | '[muted]' | '[name]' | '[nohref]' | '[nomodule]' | '[nonce]' | '[noresize]' | '[noshade]' | '[novalidate]' | '[nowrap]' | '[object]' | '[onafterprint]' | '[onbeforeprint]' | '[onbeforeunload]' | '[onblur]' | '[onerror]' | '[onfocus]' | '[onhashchange]' | '[onlanguagechange]' | '[onload]' | '[onmessage]' | '[onoffline]' | '[ononline]' | '[onpopstate]' | '[onredo]' | '[onresize]' | '[onstorage]' | '[onundo]' | '[onunload]' | '[open]' | '[optimum]' | '[part]' | '[ping]' | '[placeholder]' | '[played]' | '[poster]' | '[prefetch]' | '[preload]' | '[profile]' | '[prompt]' | '[radiogroup]' | '[readonly]' | '[referrerPolicy]' | '[referrerpolicy]' | '[rel]' | '[required]' | '[rev]' | '[reversed]' | '[rightmargin]' | '[rows]' | '[rowspan]' | '[rules]' | '[sandbox-allow-downloads]' | '[sandbox-allow-modals]' | '[sandbox-allow-popups-to-escape-sandbox]' | '[sandbox-allow-popups]' | '[sandbox-allow-presentation]' | '[sandbox-allow-same-origin]' | '[sandbox-allow-storage-access-by-user-activation]' | '[sandbox-allow-top-navigation-by-user-activation]' | '[sandbox]' | '[scope]' | '[scoped]' | '[scrollamount]' | '[scrolldelay]' | '[scrolling]' | '[selected]' | '[shape]' | '[size]' | '[sizes]' | '[slot]' | '[span]' | '[spellcheck]' | '[src]' | '[srcdoc]' | '[srclang]' | '[srcset]' | '[standby]' | '[start]' | '[style]' | '[summary]' | '[tabindex]' | '[target]' | '[text]' | '[title]' | '[topmargin]' | '[translate]' | '[truespeed]' | '[type]' | '[usemap]' | '[valign]' | '[value]' | '[valuetype]' | '[version]' | '[vlink]' | '[volume]' | '[vspace]' | '[webkitallowfullscreen]' | '[width]' | '[wrap]' | '[xmlns]';
export declare type SvgAttributes = '[accent-height]' | '[alignment-baseline]' | '[allowReorder]' | '[alphabetic]' | '[animation]' | '[arabic-form]' | '[ascent]' | '[attributeName]' | '[attributeType]' | '[azimuth]' | '[baseFrequency]' | '[baseProfile]' | '[baseline-shift]' | '[bbox]' | '[bias]' | '[by]' | '[calcMode]' | '[cap-height]' | '[class]' | '[clip-path]' | '[clip-rule]' | '[clipPathUnits]' | '[clip]' | '[color-interpolation-filters]' | '[color-interpolation]' | '[color-profile]' | '[color-rendering]' | '[color]' | '[contentScriptType]' | '[contentStyleType]' | '[cursor]' | '[cx]' | '[cy]' | '[d]' | '[descent]' | '[diffuseConstant]' | '[direction]' | '[display]' | '[divisor]' | '[document]' | '[dominant-baseline]' | '[download]' | '[dur]' | '[dx]' | '[dy]' | '[edgeMode]' | '[elevation]' | '[enable-background]' | '[externalResourcesRequired]' | '[fill-opacity]' | '[fill-rule]' | '[fill]' | '[filterRes]' | '[filterUnits]' | '[filter]' | '[flood-color]' | '[flood-opacity]' | '[font-family]' | '[font-size-adjust]' | '[font-size]' | '[font-stretch]' | '[font-style]' | '[font-variant]' | '[font-weight]' | '[format]' | '[fr]' | '[from]' | '[fx]' | '[fy]' | '[g1]' | '[g2]' | '[global]' | '[glyph-name]' | '[glyph-orientation-horizontal]' | '[glyph-orientation-vertical]' | '[glyphRef]' | '[gradientTransform]' | '[gradientUnits]' | '[graphical]' | '[hanging]' | '[hatchContentUnits]' | '[hatchUnits]' | '[height]' | '[horiz-adv-x]' | '[horiz-origin-x]' | '[horiz-origin-y]' | '[href]' | '[hreflang]' | '[id]' | '[ideographic]' | '[image-rendering]' | '[in2]' | '[in]' | '[k1]' | '[k2]' | '[k3]' | '[k4]' | '[k]' | '[kernelMatrix]' | '[kernelUnitLength]' | '[kerning]' | '[keyPoints]' | '[lang]' | '[lengthAdjust]' | '[letter-spacing]' | '[lighting-color]' | '[limitingConeAngle]' | '[local]' | '[marker-end]' | '[marker-mid]' | '[marker-start]' | '[markerHeight]' | '[markerUnits]' | '[markerWidth]' | '[maskContentUnits]' | '[maskUnits]' | '[mask]' | '[mathematical]' | '[media]' | '[mode]' | '[name]' | '[numOctaves]' | '[offset]' | '[opacity]' | '[operator]' | '[order]' | '[orient]' | '[orientation]' | '[origin]' | '[overflow]' | '[overline-position]' | '[overline-thickness]' | '[paint-order]' | '[panose-1]' | '[path]' | '[patternContentUnits]' | '[patternTransform]' | '[patternUnits]' | '[ping]' | '[pitch]' | '[pointer-events]' | '[pointsAtX]' | '[pointsAtY]' | '[pointsAtZ]' | '[points]' | '[preserveAlpha]' | '[preserveAspectRatio]' | '[primitiveUnits]' | '[r]' | '[radius]' | '[refX]' | '[refY]' | '[referrerPolicy]' | '[rel]' | '[rendering-intent]' | '[repeatCount]' | '[requiredExtensions]' | '[requiredFeatures]' | '[rotate]' | '[rx]' | '[ry]' | '[scale]' | '[seed]' | '[shape-rendering]' | '[side]' | '[slope]' | '[solid-color]' | '[solid-opacity]' | '[spacing]' | '[specularConstant]' | '[specularExponent]' | '[spreadMethod]' | '[startOffset]' | '[stdDeviation]' | '[stemh]' | '[stemv]' | '[stitchTiles]' | '[stop-color]' | '[stop-opacity]' | '[strikethrough-position]' | '[strikethrough-thickness]' | '[string]' | '[stroke-dasharray]' | '[stroke-dashoffset]' | '[stroke-linecap]' | '[stroke-linejoin]' | '[stroke-miterlimit]' | '[stroke-opacity]' | '[stroke-width]' | '[stroke]' | '[style]' | '[surfaceScale]' | '[systemLanguage]' | '[tabindex]' | '[targetX]' | '[targetY]' | '[target]' | '[text-anchor]' | '[text-decoration]' | '[text-overflow]' | '[text-rendering]' | '[textLength]' | '[title]' | '[to]' | '[transform-origin]' | '[transform]' | '[type]' | '[u1]' | '[u2]' | '[underline-position]' | '[underline-thickness]' | '[unicode-bidi]' | '[unicode-range]' | '[unicode]' | '[units-per-em]' | '[v-alphabetic]' | '[v-hanging]' | '[v-ideographic]' | '[v-mathematical]' | '[values]' | '[vector-effect]' | '[version]' | '[vert-adv-y]' | '[vert-origin-x]' | '[vert-origin-y]' | '[viewBox]' | '[viewTarget]' | '[visibility]' | '[white-space]' | '[width]' | '[widths]' | '[word-spacing]' | '[writing-mode]' | '[x-height]' | '[x1]' | '[x2]' | '[xChannelSelector]' | '[x]' | '[y1]' | '[y2]' | '[yChannelSelector]' | '[y]' | '[z]' | '[zoomAndPan]';
export declare type Globals = 'inherit' | 'initial' | 'revert' | 'unset';
export declare type OnlyObject = Record<never, never>;
export declare type OnlyNumber = number & OnlyObject;
export declare type OnlyString = string & OnlyObject;
export declare type OnlyStringNumeric = (number | string) & OnlyObject;
export declare namespace Property {
    type AlignContent = DataType.ContentDistribution | DataType.ContentPosition | 'baseline' | 'normal' | OnlyString;
    type AlignItems = DataType.SelfPosition | 'baseline' | 'normal' | 'stretch' | OnlyString;
    type AlignSelf = DataType.SelfPosition | 'auto' | 'baseline' | 'normal' | 'stretch' | OnlyString;
    type AlignTracks = DataType.ContentDistribution | DataType.ContentPosition | 'baseline' | 'normal' | OnlyString;
    type All = never;
    type Animation = DataType.SingleAnimation | OnlyString;
    type AnimationDelay = never | OnlyString;
    type AnimationDirection = DataType.SingleAnimationDirection | OnlyString;
    type AnimationDuration = never | OnlyString;
    type AnimationFillMode = DataType.SingleAnimationFillMode | OnlyString;
    type AnimationIterationCount = 'infinite' | OnlyStringNumeric;
    type AnimationName = 'none' | OnlyString;
    type AnimationPlayState = 'paused' | 'running' | OnlyString;
    type AnimationTimingFunction = DataType.EasingFunction | OnlyString;
    type Appearance = DataType.CompatAuto | 'auto' | 'menulist-button' | 'none' | 'textfield';
    type AspectRatio = 'auto' | OnlyString;
    type Azimuth = 'behind' | 'center' | 'center-left' | 'center-right' | 'far-left' | 'far-right' | 'left' | 'left-side' | 'leftwards' | 'right' | 'right-side' | 'rightwards' | OnlyString;
    type BackdropFilter = 'none' | OnlyString;
    type BackfaceVisibility = 'hidden' | 'visible';
    type Background = DataType.FinalBgLayer | OnlyString;
    type BackgroundAttachment = DataType.Attachment | OnlyString;
    type BackgroundBlendMode = DataType.BlendMode | OnlyString;
    type BackgroundClip = DataType.Box | OnlyString;
    type BackgroundColor = DataType.Color;
    type BackgroundImage = 'none' | OnlyString;
    type BackgroundOrigin = DataType.Box | OnlyString;
    type BackgroundPosition = DataType.BgPosition | OnlyString;
    type BackgroundPositionX = 'center' | 'left' | 'right' | 'x-end' | 'x-start' | OnlyStringNumeric;
    type BackgroundPositionY = 'bottom' | 'center' | 'top' | 'y-end' | 'y-start' | OnlyStringNumeric;
    type BackgroundRepeat = DataType.RepeatStyle | OnlyString;
    type BackgroundSize = DataType.BgSize | OnlyString;
    type BlockOverflow = 'clip' | 'ellipsis' | OnlyString;
    type BlockSize = number | 'auto' | 'stretch' | 'fit-content' | 'max-content' | 'min-content' | OnlyString;
    type Border = DataType.LineWidth | DataType.LineStyle | DataType.Color | OnlyString;
    type BorderBlock = DataType.LineWidth | DataType.LineStyle | DataType.Color | OnlyString;
    type BorderBlockColor = DataType.Color | OnlyString;
    type BorderBlockEnd = DataType.LineWidth | DataType.LineStyle | DataType.Color | OnlyString;
    type BorderBlockEndColor = DataType.Color;
    type BorderBlockEndStyle = DataType.LineStyle;
    type BorderBlockEndWidth = DataType.LineWidth;
    type BorderBlockStart = DataType.LineWidth | DataType.LineStyle | DataType.Color | OnlyString;
    type BorderBlockStartColor = DataType.Color;
    type BorderBlockStartStyle = DataType.LineStyle;
    type BorderBlockStartWidth = DataType.LineWidth;
    type BorderBlockStyle = DataType.LineStyle;
    type BorderBlockWidth = DataType.LineWidth;
    type BorderBottom = DataType.LineWidth | DataType.LineStyle | DataType.Color | OnlyString;
    type BorderBottomColor = DataType.Color;
    type BorderBottomLeftRadius = OnlyStringNumeric;
    type BorderBottomRightRadius = OnlyStringNumeric;
    type BorderBottomStyle = DataType.LineStyle;
    type BorderBottomWidth = DataType.LineWidth;
    type BorderCollapse = 'collapse' | 'separate';
    type BorderColor = DataType.Color | OnlyString;
    type BorderEndEndRadius = OnlyStringNumeric;
    type BorderEndStartRadius = OnlyStringNumeric;
    type BorderImage = 'none' | 'repeat' | 'round' | 'space' | 'stretch' | OnlyStringNumeric;
    type BorderImageOutset = OnlyStringNumeric;
    type BorderImageRepeat = 'repeat' | 'round' | 'space' | 'stretch' | OnlyString;
    type BorderImageSlice = OnlyStringNumeric;
    type BorderImageSource = 'none' | OnlyString;
    type BorderImageWidth = 'auto' | OnlyStringNumeric;
    type BorderInline = DataType.LineWidth | DataType.LineStyle | DataType.Color | OnlyString;
    type BorderInlineColor = DataType.Color | OnlyString;
    type BorderInlineEnd = DataType.LineWidth | DataType.LineStyle | DataType.Color | OnlyString;
    type BorderInlineEndColor = DataType.Color;
    type BorderInlineEndStyle = DataType.LineStyle;
    type BorderInlineEndWidth = DataType.LineWidth;
    type BorderInlineStart = DataType.LineWidth | DataType.LineStyle | DataType.Color | OnlyString;
    type BorderInlineStartColor = DataType.Color;
    type BorderInlineStartStyle = DataType.LineStyle;
    type BorderInlineStartWidth = DataType.LineWidth;
    type BorderInlineStyle = DataType.LineStyle;
    type BorderInlineWidth = DataType.LineWidth;
    type BorderLeft = DataType.LineWidth | DataType.LineStyle | DataType.Color | OnlyString;
    type BorderLeftColor = DataType.Color;
    type BorderLeftStyle = DataType.LineStyle;
    type BorderLeftWidth = DataType.LineWidth;
    type BorderRadius = OnlyStringNumeric;
    type BorderRight = DataType.LineWidth | DataType.LineStyle | DataType.Color | OnlyString;
    type BorderRightColor = DataType.Color;
    type BorderRightStyle = DataType.LineStyle;
    type BorderRightWidth = DataType.LineWidth;
    type BorderSpacing = OnlyStringNumeric;
    type BorderStartEndRadius = OnlyStringNumeric;
    type BorderStartStartRadius = OnlyStringNumeric;
    type BorderStyle = DataType.LineStyle | OnlyString;
    type BorderTop = DataType.LineWidth | DataType.LineStyle | DataType.Color | OnlyString;
    type BorderTopColor = DataType.Color;
    type BorderTopLeftRadius = OnlyStringNumeric;
    type BorderTopRightRadius = OnlyStringNumeric;
    type BorderTopStyle = DataType.LineStyle;
    type BorderTopWidth = DataType.LineWidth;
    type BorderWidth = DataType.LineWidth | OnlyString;
    type Bottom = 'auto' | OnlyStringNumeric;
    type BoxAlign = 'baseline' | 'center' | 'end' | 'start' | 'stretch';
    type BoxDecorationBreak = 'clone' | 'slice';
    type BoxDirection = 'inherit' | 'normal' | 'reverse';
    type BoxFlex = OnlyNumber;
    type BoxFlexGroup = OnlyNumber;
    type BoxLines = 'multiple' | 'single';
    type BoxOrdinalGroup = OnlyNumber;
    type BoxOrient = 'block-axis' | 'horizontal' | 'inherit' | 'inline-axis' | 'vertical';
    type BoxPack = 'center' | 'end' | 'justify' | 'start';
    type BoxShadow = 'none' | OnlyString;
    type BoxSizing = 'border-box' | 'content-box';
    type BreakAfter = 'all' | 'always' | 'auto' | 'avoid' | 'avoid-column' | 'avoid-page' | 'avoid-region' | 'column' | 'left' | 'page' | 'recto' | 'region' | 'right' | 'verso';
    type BreakBefore = 'all' | 'always' | 'auto' | 'avoid' | 'avoid-column' | 'avoid-page' | 'avoid-region' | 'column' | 'left' | 'page' | 'recto' | 'region' | 'right' | 'verso';
    type BreakInside = 'auto' | 'avoid' | 'avoid-column' | 'avoid-page' | 'avoid-region';
    type CaptionSide = 'block-end' | 'block-start' | 'bottom' | 'inline-end' | 'inline-start' | 'top';
    type CaretColor = DataType.Color | 'auto';
    type Clear = 'both' | 'inline-end' | 'inline-start' | 'left' | 'none' | 'right';
    type Clip = 'auto' | OnlyString;
    type ClipPath = DataType.GeometryBox | 'none' | OnlyString;
    type Color = DataType.Color;
    type ColorAdjust = 'economy' | 'exact';
    type ColorScheme = 'dark' | 'light' | 'light dark' | 'normal' | OnlyString;
    type ColumnCount = 'auto' | OnlyNumber;
    type ColumnFill = 'auto' | 'balance';
    type ColumnGap = 'normal' | OnlyStringNumeric;
    type ColumnRule = DataType.LineWidth | DataType.LineStyle | DataType.Color | OnlyString;
    type ColumnRuleColor = DataType.Color;
    type ColumnRuleStyle = DataType.LineStyle | OnlyString;
    type ColumnRuleWidth = DataType.LineWidth | OnlyString;
    type ColumnSpan = 'all' | 'none';
    type ColumnWidth = number | 'auto';
    type Columns = 'auto' | OnlyStringNumeric;
    type Contain = 'content' | 'layout' | 'none' | 'paint' | 'size' | 'strict' | 'style' | OnlyString;
    type Content = DataType.ContentList | 'none' | 'normal' | OnlyString;
    type ContentVisibility = 'auto' | 'hidden' | 'visible';
    type CounterIncrement = 'none' | OnlyString;
    type CounterReset = 'none' | OnlyString;
    type CounterSet = 'none' | OnlyString;
    type Cursor = 'alias' | 'all-scroll' | 'auto' | 'cell' | 'col-resize' | 'context-menu' | 'copy' | 'crosshair' | 'default' | 'e-resize' | 'ew-resize' | 'grab' | 'grabbing' | 'help' | 'move' | 'n-resize' | 'ne-resize' | 'nesw-resize' | 'no-drop' | 'none' | 'not-allowed' | 'ns-resize' | 'nw-resize' | 'nwse-resize' | 'pointer' | 'progress' | 'row-resize' | 's-resize' | 'se-resize' | 'sw-resize' | 'text' | 'vertical-text' | 'w-resize' | 'wait' | 'zoom-in' | 'zoom-out' | OnlyString;
    type Direction = 'ltr' | 'rtl';
    type Display = DataType.DisplayOutside | DataType.DisplayInside | DataType.DisplayInternal | DataType.DisplayLegacy | 'contents' | 'list-item' | 'none' | OnlyString;
    type EmptyCells = 'hide' | 'show';
    type Filter = 'none' | OnlyString;
    type Flex = 'auto' | 'content' | 'stretch' | 'fit-content' | 'max-content' | 'min-content' | 'none' | OnlyStringNumeric;
    type FlexBasis = number | 'auto' | 'content' | 'stretch' | 'fit-content' | 'max-content' | 'min-content' | OnlyString;
    type FlexDirection = 'column' | 'column-reverse' | 'row' | 'row-reverse';
    type FlexFlow = 'column' | 'column-reverse' | 'nowrap' | 'row' | 'row-reverse' | 'wrap' | 'wrap-reverse' | OnlyString;
    type FlexGrow = OnlyStringNumeric;
    type FlexShrink = OnlyNumber;
    type FlexWrap = 'nowrap' | 'wrap' | 'wrap-reverse';
    type Float = 'inline-end' | 'inline-start' | 'left' | 'none' | 'right';
    type Font = 'caption' | 'icon' | 'menu' | 'message-box' | 'small-caption' | 'status-bar' | OnlyString;
    type FontFamily = DataType.GenericFamily | OnlyString;
    type FontFeatureSettings = 'normal' | OnlyString;
    type FontKerning = 'auto' | 'none' | 'normal';
    type FontLanguageOverride = 'normal' | OnlyString;
    type FontOpticalSizing = 'auto' | 'none';
    type FontSize = DataType.AbsoluteSize | 'larger' | 'smaller' | OnlyStringNumeric;
    type FontSizeAdjust = 'none' | OnlyNumber;
    type FontSmooth = DataType.AbsoluteSize | number | 'always' | 'auto' | 'never';
    type FontStretch = DataType.FontStretchAbsolute;
    type FontStyle = 'italic' | 'normal' | 'oblique' | OnlyString;
    type FontSynthesis = 'none' | 'style' | 'weight' | OnlyString;
    type FontVariant = DataType.EastAsianVariantValues | 'all-petite-caps' | 'all-small-caps' | 'common-ligatures' | 'contextual' | 'diagonal-fractions' | 'discretionary-ligatures' | 'full-width' | 'historical-forms' | 'historical-ligatures' | 'lining-nums' | 'no-common-ligatures' | 'no-contextual' | 'no-discretionary-ligatures' | 'no-historical-ligatures' | 'none' | 'normal' | 'oldstyle-nums' | 'ordinal' | 'petite-caps' | 'proportional-nums' | 'proportional-width' | 'ruby' | 'slashed-zero' | 'small-caps' | 'stacked-fractions' | 'tabular-nums' | 'titling-caps' | 'unicase' | OnlyString;
    type FontVariantAlternates = 'historical-forms' | 'normal' | OnlyString;
    type FontVariantCaps = 'all-petite-caps' | 'all-small-caps' | 'normal' | 'petite-caps' | 'small-caps' | 'titling-caps' | 'unicase';
    type FontVariantEastAsian = DataType.EastAsianVariantValues | 'full-width' | 'normal' | 'proportional-width' | 'ruby' | OnlyString;
    type FontVariantLigatures = 'common-ligatures' | 'contextual' | 'discretionary-ligatures' | 'historical-ligatures' | 'no-common-ligatures' | 'no-contextual' | 'no-discretionary-ligatures' | 'no-historical-ligatures' | 'none' | 'normal' | OnlyString;
    type FontVariantNumeric = 'diagonal-fractions' | 'lining-nums' | 'normal' | 'oldstyle-nums' | 'ordinal' | 'proportional-nums' | 'slashed-zero' | 'stacked-fractions' | 'tabular-nums' | OnlyString;
    type FontVariantPosition = 'normal' | 'sub' | 'super';
    type FontVariationSettings = 'normal' | OnlyString;
    type FontWeight = DataType.FontWeightAbsolute | 'bolder' | 'lighter';
    type ForcedColorAdjust = 'auto' | 'none';
    type Gap = 'normal' | OnlyStringNumeric;
    type Grid = 'none' | OnlyString;
    type GridArea = DataType.GridLine | OnlyString;
    type GridAutoColumns = DataType.TrackBreadth | OnlyString;
    type GridAutoFlow = 'column' | 'dense' | 'row' | OnlyString;
    type GridAutoRows = DataType.TrackBreadth | OnlyString;
    type GridColumn = DataType.GridLine | OnlyString;
    type GridColumnEnd = DataType.GridLine;
    type GridColumnGap = OnlyStringNumeric;
    type GridColumnStart = DataType.GridLine;
    type GridGap = OnlyStringNumeric;
    type GridRow = DataType.GridLine | OnlyString;
    type GridRowEnd = DataType.GridLine;
    type GridRowGap = OnlyStringNumeric;
    type GridRowStart = DataType.GridLine;
    type GridTemplate = 'none' | OnlyString;
    type GridTemplateAreas = 'none' | OnlyString;
    type GridTemplateColumns = DataType.TrackBreadth | 'none' | 'subgrid' | OnlyString;
    type GridTemplateRows = DataType.TrackBreadth | 'none' | 'subgrid' | OnlyString;
    type HangingPunctuation = 'allow-end' | 'first' | 'force-end' | 'last' | 'none' | OnlyString;
    type Height = number | 'auto' | 'stretch' | 'fit-content' | 'max-content' | 'min-content' | OnlyString;
    type Hyphens = 'auto' | 'manual' | 'none';
    type ImageOrientation = 'flip' | 'from-image' | OnlyString;
    type ImageRendering = 'auto' | 'crisp-edges' | 'pixelated';
    type ImageResolution = 'from-image' | OnlyString;
    type ImeMode = 'active' | 'auto' | 'disabled' | 'inactive' | 'normal';
    type InitialLetter = 'normal' | OnlyStringNumeric;
    type InlineSize = number | 'auto' | 'stretch' | 'fit-content' | 'max-content' | 'min-content' | OnlyString;
    type Inset = 'auto' | OnlyStringNumeric;
    type InsetBlock = 'auto' | OnlyStringNumeric;
    type InsetBlockEnd = 'auto' | OnlyStringNumeric;
    type InsetBlockStart = 'auto' | OnlyStringNumeric;
    type InsetInline = 'auto' | OnlyStringNumeric;
    type InsetInlineEnd = 'auto' | OnlyStringNumeric;
    type InsetInlineStart = 'auto' | OnlyStringNumeric;
    type Isolation = 'auto' | 'isolate';
    type JustifyContent = DataType.ContentDistribution | DataType.ContentPosition | 'left' | 'normal' | 'right' | OnlyString;
    type JustifyItems = DataType.SelfPosition | 'baseline' | 'left' | 'legacy' | 'normal' | 'right' | 'stretch' | OnlyString;
    type JustifySelf = DataType.SelfPosition | 'auto' | 'baseline' | 'left' | 'normal' | 'right' | 'stretch' | OnlyString;
    type JustifyTracks = DataType.ContentDistribution | DataType.ContentPosition | 'left' | 'normal' | 'right' | OnlyString;
    type Left = 'auto' | OnlyStringNumeric;
    type LetterSpacing = 'normal' | OnlyStringNumeric;
    type LineBreak = 'anywhere' | 'auto' | 'loose' | 'normal' | 'strict';
    type LineClamp = 'none' | OnlyNumber;
    type LineHeight = 'normal' | OnlyStringNumeric;
    type LineHeightStep = number;
    type ListStyle = 'inside' | 'none' | 'outside' | OnlyString;
    type ListStyleImage = 'none' | OnlyString;
    type ListStylePosition = 'inside' | 'outside';
    type ListStyleType = 'none' | OnlyString;
    type Margin = 'auto' | OnlyStringNumeric;
    type MarginBlock = 'auto' | OnlyStringNumeric;
    type MarginBlockEnd = 'auto' | OnlyStringNumeric;
    type MarginBlockStart = 'auto' | OnlyStringNumeric;
    type MarginBottom = 'auto' | OnlyStringNumeric;
    type MarginInline = 'auto' | OnlyStringNumeric;
    type MarginInlineEnd = 'auto' | OnlyStringNumeric;
    type MarginInlineStart = 'auto' | OnlyStringNumeric;
    type MarginLeft = 'auto' | OnlyStringNumeric;
    type MarginRight = 'auto' | OnlyStringNumeric;
    type MarginTop = 'auto' | OnlyStringNumeric;
    type Mask = DataType.MaskLayer | OnlyString;
    type MaskBorder = 'alpha' | 'luminance' | 'none' | 'repeat' | 'round' | 'space' | 'stretch' | OnlyStringNumeric;
    type MaskBorderMode = 'alpha' | 'luminance';
    type MaskBorderOutset = OnlyStringNumeric;
    type MaskBorderRepeat = 'repeat' | 'round' | 'space' | 'stretch' | OnlyString;
    type MaskBorderSlice = OnlyStringNumeric;
    type MaskBorderSource = 'none' | OnlyString;
    type MaskBorderWidth = 'auto' | OnlyStringNumeric;
    type MaskClip = DataType.GeometryBox | 'no-clip' | OnlyString;
    type MaskComposite = DataType.CompositingOperator | OnlyString;
    type MaskImage = 'none' | OnlyString;
    type MaskMode = DataType.MaskingMode | OnlyString;
    type MaskOrigin = DataType.Box | 'margin-box' | OnlyString;
    type MaskPosition = DataType.Position | OnlyString;
    type MaskRepeat = DataType.RepeatStyle | OnlyString;
    type MaskSize = DataType.BgSize | OnlyString;
    type MaskType = 'alpha' | 'luminance';
    type MathStyle = 'compact' | 'normal';
    type MaxBlockSize = number | 'stretch' | 'fit-content' | 'max-content' | 'min-content' | 'none' | OnlyString;
    type MaxHeight = number | 'stretch' | 'fit-content' | 'intrinsic' | 'max-content' | 'min-content' | 'none' | OnlyString;
    type MaxInlineSize = number | 'stretch' | 'fit-content' | 'max-content' | 'min-content' | 'none' | OnlyString;
    type MaxLines = 'none' | OnlyNumber;
    type MaxWidth = number | 'stretch' | 'fit-content' | 'intrinsic' | 'max-content' | 'min-content' | 'none' | OnlyString;
    type MinBlockSize = number | 'auto' | 'stretch' | 'fit-content' | 'max-content' | 'min-content' | OnlyString;
    type MinHeight = number | 'auto' | 'stretch' | 'fit-content' | 'intrinsic' | 'max-content' | 'min-content' | OnlyString;
    type MinInlineSize = number | 'auto' | 'stretch' | 'fit-content' | 'max-content' | 'min-content' | OnlyString;
    type MinWidth = number | 'auto' | 'stretch' | 'fit-content' | 'intrinsic' | 'max-content' | 'min-content' | 'min-intrinsic' | OnlyString;
    type MixBlendMode = DataType.BlendMode;
    type Offset = DataType.Position | DataType.GeometryBox | 'auto' | 'none' | OnlyString;
    type OffsetDistance = OnlyStringNumeric;
    type OffsetPath = DataType.GeometryBox | 'none' | OnlyString;
    type OffsetRotate = 'auto' | 'reverse' | OnlyString;
    type ObjectFit = 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';
    type ObjectPosition = DataType.Position;
    type OffsetAnchor = DataType.Position | 'auto';
    type Opacity = OnlyStringNumeric;
    type Order = OnlyNumber;
    type Orphans = OnlyNumber;
    type Outline = DataType.Color | DataType.LineStyle | DataType.LineWidth | 'auto' | 'invert' | OnlyString;
    type OutlineColor = DataType.Color | 'invert';
    type OutlineOffset = number;
    type OutlineStyle = DataType.LineStyle | 'auto' | OnlyString;
    type OutlineWidth = DataType.LineWidth;
    type Overflow = 'auto' | 'clip' | 'hidden' | 'scroll' | 'visible' | OnlyString;
    type OverflowAnchor = 'auto' | 'none';
    type OverflowBlock = 'auto' | 'clip' | 'hidden' | 'scroll' | 'visible';
    type OverflowClipBox = 'content-box' | 'padding-box';
    type OverflowClipMargin = DataType.VisualBox | OnlyStringNumeric;
    type OverflowInline = 'auto' | 'clip' | 'hidden' | 'scroll' | 'visible';
    type OverflowWrap = 'anywhere' | 'break-word' | 'normal';
    type OverflowX = 'auto' | 'clip' | 'hidden' | 'scroll' | 'visible';
    type OverflowY = 'auto' | 'clip' | 'hidden' | 'scroll' | 'visible';
    type OverscrollBehavior = 'auto' | 'contain' | 'none' | OnlyString;
    type OverscrollBehaviorBlock = 'auto' | 'contain' | 'none';
    type OverscrollBehaviorInline = 'auto' | 'contain' | 'none';
    type OverscrollBehaviorX = 'auto' | 'contain' | 'none';
    type OverscrollBehaviorY = 'auto' | 'contain' | 'none';
    type Padding = OnlyStringNumeric;
    type PaddingBlock = OnlyStringNumeric;
    type PaddingBlockEnd = OnlyStringNumeric;
    type PaddingBlockStart = OnlyStringNumeric;
    type PaddingBottom = OnlyStringNumeric;
    type PaddingInline = OnlyStringNumeric;
    type PaddingInlineEnd = OnlyStringNumeric;
    type PaddingInlineStart = OnlyStringNumeric;
    type PaddingLeft = OnlyStringNumeric;
    type PaddingRight = OnlyStringNumeric;
    type PaddingTop = OnlyStringNumeric;
    type PageBreakAfter = 'always' | 'auto' | 'avoid' | 'left' | 'recto' | 'right' | 'verso';
    type PageBreakBefore = 'always' | 'auto' | 'avoid' | 'left' | 'recto' | 'right' | 'verso';
    type PageBreakInside = 'auto' | 'avoid';
    type PaintOrder = 'fill' | 'markers' | 'normal' | 'stroke' | OnlyString;
    type Perspective = number | 'none';
    type PerspectiveOrigin = DataType.Position;
    type PlaceContent = DataType.ContentDistribution | DataType.ContentPosition | 'baseline' | 'normal' | OnlyString;
    type PlaceItems = DataType.SelfPosition | 'baseline' | 'normal' | 'stretch' | OnlyString;
    type PlaceSelf = DataType.SelfPosition | 'auto' | 'baseline' | 'normal' | 'stretch' | OnlyString;
    type PointerEvents = 'all' | 'auto' | 'fill' | 'inherit' | 'none' | 'painted' | 'stroke' | 'visible' | 'visibleFill' | 'visiblePainted' | 'visibleStroke';
    type Position = 'absolute' | 'fixed' | 'relative' | 'static' | 'sticky';
    type Quotes = 'auto' | 'none' | OnlyString;
    type Resize = 'block' | 'both' | 'horizontal' | 'inline' | 'none' | 'vertical';
    type Right = 'auto' | OnlyStringNumeric;
    type Rotate = 'none' | OnlyString;
    type RowGap = 'normal' | OnlyStringNumeric;
    type RubyAlign = 'center' | 'space-around' | 'space-between' | 'start';
    type RubyMerge = 'auto' | 'collapse' | 'separate';
    type RubyPosition = 'alternate' | 'over' | 'under' | OnlyString;
    type Scale = 'none' | OnlyStringNumeric;
    type ScrollBehavior = 'auto' | 'smooth';
    type ScrollMargin = OnlyStringNumeric;
    type ScrollMarginBlock = OnlyStringNumeric;
    type ScrollMarginBlockEnd = number;
    type ScrollMarginBlockStart = number;
    type ScrollMarginBottom = number;
    type ScrollMarginInline = OnlyStringNumeric;
    type ScrollMarginInlineEnd = number;
    type ScrollMarginInlineStart = number;
    type ScrollMarginLeft = number;
    type ScrollMarginRight = number;
    type ScrollMarginTop = number;
    type ScrollPadding = 'auto' | OnlyStringNumeric;
    type ScrollPaddingBlock = 'auto' | OnlyStringNumeric;
    type ScrollPaddingBlockEnd = 'auto' | OnlyStringNumeric;
    type ScrollPaddingBlockStart = 'auto' | OnlyStringNumeric;
    type ScrollPaddingBottom = 'auto' | OnlyStringNumeric;
    type ScrollPaddingInline = 'auto' | OnlyStringNumeric;
    type ScrollPaddingInlineEnd = 'auto' | OnlyStringNumeric;
    type ScrollPaddingInlineStart = 'auto' | OnlyStringNumeric;
    type ScrollPaddingLeft = 'auto' | OnlyStringNumeric;
    type ScrollPaddingRight = 'auto' | OnlyStringNumeric;
    type ScrollPaddingTop = 'auto' | OnlyStringNumeric;
    type ScrollSnapAlign = 'center' | 'end' | 'none' | 'start' | OnlyString;
    type ScrollSnapCoordinate = DataType.Position | 'none' | OnlyString;
    type ScrollSnapDestination = DataType.Position;
    type ScrollSnapPointsX = 'none' | OnlyString;
    type ScrollSnapPointsY = 'none' | OnlyString;
    type ScrollSnapStop = 'always' | 'normal';
    type ScrollSnapType = 'block' | 'both' | 'inline' | 'none' | 'x' | 'y' | OnlyString;
    type ScrollSnapTypeX = 'mandatory' | 'none' | 'proximity';
    type ScrollSnapTypeY = 'mandatory' | 'none' | 'proximity';
    type ScrollbarColor = DataType.Color | 'auto' | 'dark' | 'light';
    type ScrollbarGutter = 'always' | 'auto' | 'stable' | OnlyString;
    type MsScrollbarTrackColor = DataType.Color;
    type ScrollbarWidth = 'auto' | 'none' | 'thin';
    type ShapeImageThreshold = OnlyStringNumeric;
    type ShapeMargin = OnlyStringNumeric;
    type ShapeOutside = DataType.Box | 'margin-box' | 'none' | OnlyString;
    type TabSize = number | OnlyNumber;
    type TableLayout = 'auto' | 'fixed';
    type TextAlign = 'center' | 'end' | 'justify' | 'left' | 'match-parent' | 'right' | 'start';
    type TextAlignLast = 'auto' | 'center' | 'end' | 'justify' | 'left' | 'right' | 'start';
    type TextCombineUpright = 'all' | 'digits' | 'none' | OnlyString;
    type TextDecoration = DataType.Color | number | 'auto' | 'blink' | 'dashed' | 'dotted' | 'double' | 'from-font' | 'grammar-error' | 'line-through' | 'none' | 'overline' | 'solid' | 'spelling-error' | 'underline' | 'wavy' | OnlyString;
    type TextDecorationColor = DataType.Color;
    type TextDecorationLine = 'blink' | 'grammar-error' | 'line-through' | 'none' | 'overline' | 'spelling-error' | 'underline' | OnlyString;
    type TextDecorationSkip = 'box-decoration' | 'edges' | 'leading-spaces' | 'none' | 'objects' | 'spaces' | 'trailing-spaces' | OnlyString;
    type TextDecorationSkipInk = 'all' | 'auto' | 'none';
    type TextDecorationStyle = 'dashed' | 'dotted' | 'double' | 'solid' | 'wavy';
    type TextDecorationThickness = 'auto' | 'from-font' | OnlyStringNumeric;
    type TextEmphasis = DataType.Color | 'circle' | 'dot' | 'double-circle' | 'filled' | 'none' | 'open' | 'sesame' | 'triangle' | OnlyString;
    type TextEmphasisColor = DataType.Color;
    type TextEmphasisPosition = OnlyString;
    type TextEmphasisStyle = 'circle' | 'dot' | 'double-circle' | 'filled' | 'none' | 'open' | 'sesame' | 'triangle' | OnlyString;
    type TextIndent = OnlyStringNumeric;
    type TextJustify = 'auto' | 'inter-character' | 'inter-word' | 'none';
    type TextOrientation = 'mixed' | 'sideways' | 'upright';
    type TextOverflow = 'clip' | 'ellipsis' | OnlyString;
    type TextRendering = 'auto' | 'geometricPrecision' | 'optimizeLegibility' | 'optimizeSpeed';
    type TextShadow = 'none' | OnlyString;
    type TextSizeAdjust = 'auto' | 'none' | OnlyString;
    type TextTransform = 'capitalize' | 'full-size-kana' | 'full-width' | 'lowercase' | 'none' | 'uppercase';
    type TextUnderlineOffset = 'auto' | OnlyStringNumeric;
    type TextUnderlinePosition = 'auto' | 'from-font' | 'left' | 'right' | 'under' | OnlyString;
    type Top = 'auto' | OnlyStringNumeric;
    type TouchAction = 'auto' | 'manipulation' | 'none' | 'pan-down' | 'pan-left' | 'pan-right' | 'pan-up' | 'pan-x' | 'pan-y' | 'pinch-zoom' | OnlyString;
    type Transform = 'none' | OnlyString;
    type TransformBox = 'border-box' | 'content-box' | 'fill-box' | 'stroke-box' | 'view-box';
    type TransformOrigin = 'bottom' | 'center' | 'left' | 'right' | 'top' | OnlyStringNumeric;
    type TransformStyle = 'flat' | 'preserve-3d';
    type Transition = DataType.SingleTransition | OnlyString;
    type TransitionDelay = never | OnlyString;
    type TransitionDuration = never | OnlyString;
    type TransitionProperty = 'all' | 'none' | OnlyString;
    type TransitionTimingFunction = DataType.EasingFunction | OnlyString;
    type Translate = 'none' | OnlyStringNumeric;
    type UnicodeBidi = 'bidi-override' | 'embed' | 'isolate' | 'isolate-override' | 'normal' | 'plaintext';
    type UserSelect = 'all' | 'auto' | 'contain' | 'element' | 'none' | 'text';
    type VerticalAlign = number | 'baseline' | 'bottom' | 'middle' | 'sub' | 'super' | 'text-bottom' | 'text-top' | 'top' | OnlyString;
    type Visibility = 'collapse' | 'hidden' | 'visible';
    type WhiteSpace = 'break-spaces' | 'normal' | 'nowrap' | 'pre' | 'pre-line' | 'pre-wrap';
    type Widows = OnlyNumber;
    type Width = number | 'auto' | 'stretch' | 'fit-content' | 'intrinsic' | 'max-content' | 'min-content' | 'min-intrinsic' | OnlyString;
    type WillChange = DataType.AnimateableFeature | 'auto' | OnlyString;
    type WordBreak = 'break-all' | 'break-word' | 'keep-all' | 'normal';
    type WordSpacing = 'normal' | OnlyStringNumeric;
    type WordWrap = 'break-word' | 'normal';
    type WritingMode = 'horizontal-tb' | 'sideways-lr' | 'sideways-rl' | 'vertical-lr' | 'vertical-rl';
    type ZIndex = 'auto' | OnlyStringNumeric;
    type Zoom = 'normal' | 'reset' | OnlyStringNumeric;
    type MozAppearance = 'button' | 'button-arrow-down' | 'button-arrow-next' | 'button-arrow-previous' | 'button-arrow-up' | 'button-bevel' | 'button-focus' | 'caret' | 'checkbox' | 'checkbox-container' | 'checkbox-label' | 'checkmenuitem' | 'dualbutton' | 'groupbox' | 'listbox' | 'listitem' | 'menuarrow' | 'menubar' | 'menucheckbox' | 'menuimage' | 'menuitem' | 'menuitemtext' | 'menulist' | 'menulist-button' | 'menulist-text' | 'menulist-textfield' | 'menupopup' | 'menuradio' | 'menuseparator' | 'meterbar' | 'meterchunk' | 'none' | 'progressbar' | 'progressbar-vertical' | 'progresschunk' | 'progresschunk-vertical' | 'radio' | 'radio-container' | 'radio-label' | 'radiomenuitem' | 'range' | 'range-thumb' | 'resizer' | 'resizerpanel' | 'scale-horizontal' | 'scale-vertical' | 'scalethumb-horizontal' | 'scalethumb-vertical' | 'scalethumbend' | 'scalethumbstart' | 'scalethumbtick' | 'scrollbarbutton-down' | 'scrollbarbutton-left' | 'scrollbarbutton-right' | 'scrollbarbutton-up' | 'scrollbarthumb-horizontal' | 'scrollbarthumb-vertical' | 'scrollbartrack-horizontal' | 'scrollbartrack-vertical' | 'searchfield' | 'separator' | 'sheet' | 'spinner' | 'spinner-downbutton' | 'spinner-textfield' | 'spinner-upbutton' | 'splitter' | 'statusbar' | 'statusbarpanel' | 'tab' | 'tab-scroll-arrow-back' | 'tab-scroll-arrow-forward' | 'tabpanel' | 'tabpanels' | 'textfield' | 'textfield-multiline' | 'toolbar' | 'toolbarbutton' | 'toolbarbutton-dropdown' | 'toolbargripper' | 'toolbox' | 'tooltip' | 'treeheader' | 'treeheadercell' | 'treeheadersortarrow' | 'treeitem' | 'treeline' | 'treetwisty' | 'treetwistyopen' | 'treeview';
    type MozBinding = 'none' | OnlyString;
    type MozBorderBottomColors = DataType.Color | 'none' | OnlyString;
    type MozBorderLeftColors = DataType.Color | 'none' | OnlyString;
    type MozBorderRightColors = DataType.Color | 'none' | OnlyString;
    type MozBorderTopColors = DataType.Color | 'none' | OnlyString;
    type MozContextProperties = 'fill' | 'fill-opacity' | 'none' | 'stroke' | 'stroke-opacity' | OnlyString;
    type MozFloatEdge = 'border-box' | 'content-box' | 'margin-box' | 'padding-box';
    type MozForceBrokenImageIcon = OnlyNumber;
    type MozImageRegion = 'auto' | OnlyString;
    type MozOrient = 'block' | 'horizontal' | 'inline' | 'vertical';
    type MozOutlineRadius = OnlyStringNumeric;
    type MozOutlineRadiusBottomleft = OnlyStringNumeric;
    type MozOutlineRadiusBottomright = OnlyStringNumeric;
    type MozOutlineRadiusTopleft = OnlyStringNumeric;
    type MozOutlineRadiusTopright = OnlyStringNumeric;
    type MozStackSizing = 'ignore' | 'stretch-to-fit';
    type MozTextBlink = 'blink' | 'none';
    type MozUserFocus = 'ignore' | 'none' | 'normal' | 'select-after' | 'select-all' | 'select-before' | 'select-menu' | 'select-same';
    type MozUserInput = 'auto' | 'disabled' | 'enabled' | 'none';
    type MozUserModify = 'read-only' | 'read-write' | 'write-only';
    type MozWindowDragging = 'drag' | 'no-drag';
    type MozWindowShadow = 'default' | 'menu' | 'none' | 'sheet' | 'tooltip';
    type MsAccelerator = 'false' | 'true';
    type MsBlockProgression = 'bt' | 'lr' | 'rl' | 'tb';
    type MsContentZoomChaining = 'chained' | 'none';
    type MsContentZoomLimit = OnlyString;
    type MsContentZoomLimitMax = OnlyString;
    type MsContentZoomLimitMin = OnlyString;
    type MsContentZoomSnap = 'mandatory' | 'none' | 'proximity' | OnlyString;
    type MsContentZoomSnapPoints = OnlyString;
    type MsContentZoomSnapType = 'mandatory' | 'none' | 'proximity';
    type MsContentZooming = 'none' | 'zoom';
    type MsFilter = OnlyString;
    type MsFlowFrom = 'none' | OnlyString;
    type MsFlowInto = 'none' | OnlyString;
    type MsGridColumns = DataType.TrackBreadth | 'none' | OnlyString;
    type MsGridRows = DataType.TrackBreadth | 'none' | OnlyString;
    type MsHighContrastAdjust = 'auto' | 'none';
    type MsHyphenateLimitChars = 'auto' | OnlyStringNumeric;
    type MsHyphenateLimitLines = 'no-limit' | OnlyNumber;
    type MsHyphenateLimitZone = OnlyStringNumeric;
    type MsImeAlign = 'after' | 'auto';
    type MsOverflowStyle = 'auto' | 'none' | 'scrollbar';
    type MsScrollChaining = 'chained' | 'none';
    type MsScrollLimit = OnlyString;
    type MsScrollLimitXMax = number | 'auto';
    type MsScrollLimitXMin = number;
    type MsScrollLimitYMax = number | 'auto';
    type MsScrollLimitYMin = number;
    type MsScrollRails = 'none' | 'railed';
    type MsScrollSnapPointsX = OnlyString;
    type MsScrollSnapPointsY = OnlyString;
    type MsScrollSnapType = 'mandatory' | 'none' | 'proximity';
    type MsScrollSnapX = OnlyString;
    type MsScrollSnapY = OnlyString;
    type MsScrollTranslation = 'none' | 'vertical-to-horizontal';
    type MsScrollbar3dlightColor = DataType.Color;
    type MsScrollbarArrowColor = DataType.Color;
    type MsScrollbarBaseColor = DataType.Color;
    type MsScrollbarDarkshadowColor = DataType.Color;
    type MsScrollbarFaceColor = DataType.Color;
    type MsScrollbarHighlightColor = DataType.Color;
    type MsScrollbarShadowColor = DataType.Color;
    type MsTextAutospace = 'ideograph-alpha' | 'ideograph-numeric' | 'ideograph-parenthesis' | 'ideograph-space' | 'none';
    type MsTouchSelect = 'grippers' | 'none';
    type MsUserSelect = 'element' | 'none' | 'text';
    type MsWrapFlow = 'auto' | 'both' | 'clear' | 'end' | 'maximum' | 'start';
    type MsWrapMargin = number;
    type MsWrapThrough = 'none' | 'wrap';
    type WebkitAppearance = 'button' | 'button-bevel' | 'caret' | 'checkbox' | 'default-button' | 'inner-spin-button' | 'listbox' | 'listitem' | 'media-controls-background' | 'media-controls-fullscreen-background' | 'media-current-time-display' | 'media-enter-fullscreen-button' | 'media-exit-fullscreen-button' | 'media-fullscreen-button' | 'media-mute-button' | 'media-overlay-play-button' | 'media-play-button' | 'media-seek-back-button' | 'media-seek-forward-button' | 'media-slider' | 'media-sliderthumb' | 'media-time-remaining-display' | 'media-toggle-closed-captions-button' | 'media-volume-slider' | 'media-volume-slider-container' | 'media-volume-sliderthumb' | 'menulist' | 'menulist-button' | 'menulist-text' | 'menulist-textfield' | 'meter' | 'none' | 'progress-bar' | 'progress-bar-value' | 'push-button' | 'radio' | 'searchfield' | 'searchfield-cancel-button' | 'searchfield-decoration' | 'searchfield-results-button' | 'searchfield-results-decoration' | 'slider-horizontal' | 'slider-vertical' | 'sliderthumb-horizontal' | 'sliderthumb-vertical' | 'square-button' | 'textarea' | 'textfield';
    type WebkitBorderBefore = DataType.LineWidth | DataType.LineStyle | DataType.Color | OnlyString;
    type WebkitBorderBeforeColor = DataType.Color;
    type WebkitBorderBeforeStyle = DataType.LineStyle | OnlyString;
    type WebkitBorderBeforeWidth = DataType.LineWidth | OnlyString;
    type WebkitBoxReflect = 'above' | 'below' | 'left' | 'right' | OnlyStringNumeric;
    type WebkitLineClamp = 'none' | OnlyNumber;
    type WebkitMask = DataType.Position | DataType.RepeatStyle | DataType.Box | 'border' | 'content' | 'none' | 'padding' | 'text' | OnlyString;
    type WebkitMaskAttachment = DataType.Attachment | OnlyString;
    type WebkitMaskClip = DataType.Box | 'border' | 'content' | 'padding' | 'text' | OnlyString;
    type WebkitMaskComposite = DataType.CompositeStyle | OnlyString;
    type WebkitMaskImage = 'none' | OnlyString;
    type WebkitMaskOrigin = DataType.Box | 'border' | 'content' | 'padding' | OnlyString;
    type WebkitMaskPosition = DataType.Position | OnlyString;
    type WebkitMaskPositionX = 'center' | 'left' | 'right' | OnlyStringNumeric;
    type WebkitMaskPositionY = 'bottom' | 'center' | 'top' | OnlyStringNumeric;
    type WebkitMaskRepeat = DataType.RepeatStyle | OnlyString;
    type WebkitMaskRepeatX = 'no-repeat' | 'repeat' | 'round' | 'space';
    type WebkitMaskRepeatY = 'no-repeat' | 'repeat' | 'round' | 'space';
    type WebkitMaskSize = DataType.BgSize | OnlyString;
    type WebkitOverflowScrolling = 'auto' | 'touch';
    type WebkitTapHighlightColor = DataType.Color;
    type WebkitTextFillColor = DataType.Color;
    type WebkitTextStroke = DataType.Color | OnlyStringNumeric;
    type WebkitTextStrokeColor = DataType.Color;
    type WebkitTextStrokeWidth = number;
    type WebkitTouchCallout = 'default' | 'none';
    type WebkitUserModify = 'read-only' | 'read-write' | 'read-write-plaintext-only';
    type AlignmentBaseline = 'after-edge' | 'alphabetic' | 'auto' | 'baseline' | 'before-edge' | 'central' | 'hanging' | 'ideographic' | 'mathematical' | 'middle' | 'text-after-edge' | 'text-before-edge';
    type BaselineShift = 'baseline' | 'sub' | 'super' | OnlyStringNumeric;
    type ClipRule = 'evenodd' | 'nonzero';
    type ColorInterpolation = 'auto' | 'linearRGB' | 'sRGB';
    type ColorRendering = 'auto' | 'optimizeQuality' | 'optimizeSpeed';
    type DominantBaseline = 'alphabetic' | 'auto' | 'central' | 'hanging' | 'ideographic' | 'mathematical' | 'middle' | 'no-change' | 'reset-size' | 'text-after-edge' | 'text-before-edge' | 'use-script';
    type Fill = DataType.Paint;
    type FillOpacity = OnlyNumber;
    type FillRule = 'evenodd' | 'nonzero';
    type FloodColor = DataType.Color | 'CurrentColor' | 'hsl(' | 'lab(' | 'rgb(';
    type FloodOpacity = OnlyNumber;
    type GlyphOrientationVertical = 'auto' | OnlyStringNumeric;
    type LightingColor = DataType.Color | 'CurrentColor' | 'hsl(' | 'lab(' | 'rgb(';
    type Marker = 'none' | OnlyString;
    type MarkerEnd = 'none' | OnlyString;
    type MarkerMid = 'none' | OnlyString;
    type MarkerStart = 'none' | OnlyString;
    type ShapeRendering = 'auto' | 'crispEdges' | 'geometricPrecision' | 'optimizeSpeed';
    type StopColor = DataType.Color | 'CurrentColor' | 'hsl(' | 'lab(' | 'rgb(';
    type StopOpacity = OnlyNumber;
    type Stroke = DataType.Paint;
    type StrokeDasharray = DataType.Dasharray | 'none';
    type StrokeDashoffset = OnlyStringNumeric;
    type StrokeLinecap = 'butt' | 'round' | 'square';
    type StrokeLinejoin = 'bevel' | 'miter' | 'round';
    type StrokeMiterlimit = OnlyNumber;
    type StrokeOpacity = OnlyNumber;
    type StrokeWidth = OnlyStringNumeric;
    type TextAnchor = 'end' | 'middle' | 'start';
    type VectorEffect = 'non-scaling-stroke' | 'none';
}
export declare namespace AtRule {
    export interface CounterStyle {
        additiveSymbols?: string;
        fallback?: string;
        negative?: string;
        pad?: string;
        prefix?: string;
        range?: Range;
        speakAs?: SpeakAs;
        suffix?: string;
        symbols?: string;
        system?: System;
    }
    export interface CounterStyleHyphen {
        'additive-symbols'?: string;
        fallback?: string;
        negative?: string;
        pad?: string;
        prefix?: string;
        range?: Range;
        'speak-as'?: SpeakAs;
        suffix?: string;
        symbols?: string;
        system?: System;
    }
    export type CounterStyleFallback = {
        [P in keyof CounterStyle]: CounterStyle[P] | CounterStyle[P][];
    };
    export type CounterStyleHyphenFallback = {
        [P in keyof CounterStyleHyphen]: CounterStyleHyphen[P] | CounterStyleHyphen[P][];
    };
    export interface FontFace {
        MozFontFeatureSettings?: FontFeatureSettings;
        fontDisplay?: FontDisplay;
        fontFamily?: string;
        fontFeatureSettings?: FontFeatureSettings;
        fontStretch?: FontStretch;
        fontStyle?: FontStyle;
        fontVariant?: FontVariant;
        fontVariationSettings?: FontVariationSettings;
        fontWeight?: FontWeight;
        src?: string;
        unicodeRange?: string;
    }
    export interface FontFaceHyphen {
        'font-display'?: FontDisplay;
        'font-family'?: string;
        'font-feature-settings'?: FontFeatureSettings;
        'font-stretch'?: FontStretch;
        'font-style'?: FontStyle;
        'font-variant'?: FontVariant;
        'font-variation-settings'?: FontVariationSettings;
        'font-weight'?: FontWeight;
        src?: string;
        'unicode-range'?: string;
    }
    export type FontFaceFallback = {
        [P in keyof FontFace]: FontFace[P] | FontFace[P][];
    };
    export type FontFaceHyphenFallback = {
        [P in keyof FontFaceHyphen]: FontFaceHyphen[P] | FontFaceHyphen[P][];
    };
    export interface Page {
        size?: Size;
    }
    export interface PageHyphen {
        size?: Size;
    }
    export type PageFallback = {
        [P in keyof Page]: Page[P] | Page[P][];
    };
    export type PageHyphenFallback = {
        [P in keyof PageHyphen]: PageHyphen[P] | PageHyphen[P][];
    };
    export interface Property {
        inherits?: Inherits;
        initialValue?: boolean | OnlyStringNumeric;
        syntax?: string;
    }
    export interface PropertyHyphen {
        inherits?: Inherits;
        'initial-value'?: string;
        syntax?: string;
    }
    export type PropertyFallback = {
        [P in keyof Property]: Property[P] | Property[P][];
    };
    export type PropertyHyphenFallback = {
        [P in keyof PropertyHyphen]: PropertyHyphen[P] | PropertyHyphen[P][];
    };
    export interface Viewport {
        height?: Height;
        maxHeight?: MaxHeight;
        maxWidth?: MaxWidth;
        maxZoom?: MaxZoom;
        minHeight?: MinHeight;
        minWidth?: MinWidth;
        minZoom?: MinZoom;
        orientation?: Orientation;
        userZoom?: UserZoom;
        viewportFit?: ViewportFit;
        width?: Width;
        zoom?: Zoom;
    }
    export interface ViewportHyphen {
        height?: Height;
        'max-height'?: MaxHeight;
        'max-width'?: MaxWidth;
        'max-zoom'?: MaxZoom;
        'min-height'?: MinHeight;
        'min-width'?: MinWidth;
        'min-zoom'?: MinZoom;
        orientation?: Orientation;
        'user-zoom'?: UserZoom;
        'viewport-fit'?: ViewportFit;
        width?: Width;
        zoom?: Zoom;
    }
    export type ViewportFallback = {
        [P in keyof Viewport]: Viewport[P] | Viewport[P][];
    };
    export type ViewportHyphenFallback = {
        [P in keyof ViewportHyphen]: ViewportHyphen[P] | ViewportHyphen[P][];
    };
    type Range = 'auto' | 'infinite' | OnlyStringNumeric;
    type SpeakAs = 'auto' | 'bullets' | 'numbers' | 'spell-out' | 'words' | OnlyString;
    type System = 'additive' | 'alphabetic' | 'cyclic' | 'fixed' | 'numeric' | 'symbolic' | OnlyString;
    type FontFeatureSettings = 'normal' | OnlyString;
    type FontDisplay = 'auto' | 'block' | 'fallback' | 'optional' | 'swap';
    type FontStretch = DataType.FontStretchAbsolute | OnlyString;
    type FontStyle = 'italic' | 'normal' | 'oblique' | OnlyString;
    type FontVariant = DataType.EastAsianVariantValues | 'all-petite-caps' | 'all-small-caps' | 'common-ligatures' | 'contextual' | 'diagonal-fractions' | 'discretionary-ligatures' | 'full-width' | 'historical-forms' | 'historical-ligatures' | 'lining-nums' | 'no-common-ligatures' | 'no-contextual' | 'no-discretionary-ligatures' | 'no-historical-ligatures' | 'none' | 'normal' | 'oldstyle-nums' | 'ordinal' | 'petite-caps' | 'proportional-nums' | 'proportional-width' | 'ruby' | 'slashed-zero' | 'small-caps' | 'stacked-fractions' | 'tabular-nums' | 'titling-caps' | 'unicase' | OnlyString;
    type FontVariationSettings = 'normal' | OnlyString;
    type FontWeight = DataType.FontWeightAbsolute;
    type Size = DataType.PageSize | 'auto' | 'landscape' | 'portrait' | OnlyStringNumeric;
    type Inherits = 'false' | 'true' | boolean;
    type Height = DataType.ViewportLength | OnlyString;
    type MaxHeight = DataType.ViewportLength;
    type MaxWidth = DataType.ViewportLength;
    type MaxZoom = 'auto' | OnlyStringNumeric;
    type MinHeight = DataType.ViewportLength;
    type MinWidth = DataType.ViewportLength;
    type MinZoom = 'auto' | OnlyStringNumeric;
    type Orientation = 'auto' | 'landscape' | 'portrait';
    type UserZoom = 'fixed' | 'zoom';
    type ViewportFit = 'auto' | 'contain' | 'cover';
    type Width = DataType.ViewportLength | OnlyString;
    type Zoom = 'auto' | OnlyStringNumeric;
    export {};
}
declare namespace DataType {
    type AbsoluteSize = 'large' | 'medium' | 'small' | 'x-large' | 'x-small' | 'xx-large' | 'xx-small' | 'xxx-large';
    type AnimateableFeature = 'contents' | 'scroll-position' | OnlyString;
    type Attachment = 'fixed' | 'local' | 'scroll';
    type BgPosition = 'bottom' | 'center' | 'left' | 'right' | 'top' | OnlyStringNumeric;
    type BgSize = 'auto' | 'contain' | 'cover' | OnlyStringNumeric;
    type BlendMode = 'color' | 'color-burn' | 'color-dodge' | 'darken' | 'difference' | 'exclusion' | 'hard-light' | 'hue' | 'lighten' | 'luminosity' | 'multiply' | 'normal' | 'overlay' | 'saturation' | 'screen' | 'soft-light';
    type Box = 'border-box' | 'content-box' | 'padding-box';
    type Color = NamedColor | SystemColor | 'CurrentColor' | 'hsl(' | 'lab(' | 'rgb(' | OnlyString;
    type CompatAuto = 'button' | 'checkbox' | 'listbox' | 'menulist' | 'meter' | 'progress-bar' | 'push-button' | 'radio' | 'searchfield' | 'slider-horizontal' | 'square-button' | 'textarea';
    type CompositeStyle = 'clear' | 'copy' | 'destination-atop' | 'destination-in' | 'destination-out' | 'destination-over' | 'source-atop' | 'source-in' | 'source-out' | 'source-over' | 'xor';
    type CompositingOperator = 'add' | 'exclude' | 'intersect' | 'subtract';
    type ContentDistribution = 'space-around' | 'space-between' | 'space-evenly' | 'stretch';
    type ContentList = Quote | 'contents' | OnlyString;
    type ContentPosition = 'center' | 'end' | 'flex-end' | 'flex-start' | 'start';
    type CubicBezierTimingFunction = 'ease' | 'ease-in' | 'ease-in-out' | 'ease-out' | OnlyString;
    type Dasharray = OnlyStringNumeric;
    type SystemColor = 'ActiveText' | 'ButtonFace' | 'ButtonText' | 'ButtonBorder' | 'Canvas' | 'CanvasText' | 'Field' | 'FieldText' | 'GrayText' | 'Highlight' | 'HighlightText' | 'LinkText' | 'Mark' | 'MarkText' | 'VisitedText';
    type DisplayInside = 'flex' | 'flow' | 'flow-root' | 'grid' | 'ruby' | 'table';
    type DisplayInternal = 'ruby-base' | 'ruby-base-container' | 'ruby-text' | 'ruby-text-container' | 'table-caption' | 'table-cell' | 'table-column' | 'table-column-group' | 'table-footer-group' | 'table-header-group' | 'table-row' | 'table-row-group';
    type DisplayLegacy = 'inline-block' | 'inline-flex' | 'inline-grid' | 'inline-list-item' | 'inline-table';
    type DisplayOutside = 'block' | 'inline' | 'run-in';
    type EasingFunction = CubicBezierTimingFunction | StepTimingFunction | 'linear';
    type EastAsianVariantValues = 'jis04' | 'jis78' | 'jis83' | 'jis90' | 'simplified' | 'traditional';
    type FinalBgLayer = Color | BgPosition | RepeatStyle | Attachment | Box | 'none' | OnlyString;
    type FontStretchAbsolute = 'condensed' | 'expanded' | 'extra-condensed' | 'extra-expanded' | 'normal' | 'semi-condensed' | 'semi-expanded' | 'ultra-condensed' | 'ultra-expanded' | OnlyString;
    type FontWeightAbsolute = 'bold' | 'normal' | OnlyStringNumeric;
    type GenericFamily = 'cursive' | 'emoji' | 'fangsong' | 'fantasy' | 'math' | 'monospace' | 'sans-serif' | 'serif' | 'system-ui' | 'ui-monospace' | 'ui-rounded' | 'ui-sans-serif' | 'ui-serif';
    type GeometryBox = Box | 'fill-box' | 'margin-box' | 'stroke-box' | 'view-box';
    type GridLine = 'auto' | OnlyStringNumeric;
    type LineStyle = 'dashed' | 'dotted' | 'double' | 'groove' | 'hidden' | 'inset' | 'none' | 'outset' | 'ridge' | 'solid';
    type LineWidth = number | 'medium' | 'thick' | 'thin';
    type MaskLayer = Position | RepeatStyle | GeometryBox | CompositingOperator | MaskingMode | 'no-clip' | 'none' | OnlyString;
    type MaskingMode = 'alpha' | 'luminance' | 'match-source';
    type NamedColor = 'AliceBlue' | 'AntiqueWhite' | 'Aqua' | 'Aquamarine' | 'Azure' | 'Beige' | 'Bisque' | 'Black' | 'BlanchedAlmond' | 'Blue' | 'BlueViolet' | 'Brown' | 'BurlyWood' | 'CadetBlue' | 'Chartreuse' | 'Chocolate' | 'Coral' | 'CornflowerBlue' | 'Cornsilk' | 'Crimson' | 'Cyan' | 'DarkBlue' | 'DarkCyan' | 'DarkGoldenRod' | 'DarkGray' | 'DarkGreen' | 'DarkGrey' | 'DarkKhaki' | 'DarkMagenta' | 'DarkOliveGreen' | 'DarkOrange' | 'DarkOrchid' | 'DarkRed' | 'DarkSalmon' | 'DarkSeaGreen' | 'DarkSlateBlue' | 'DarkSlateGray' | 'DarkSlateGrey' | 'DarkTurquoise' | 'DarkViolet' | 'DeepPink' | 'DeepSkyBlue' | 'DimGray' | 'DimGrey' | 'DodgerBlue' | 'FireBrick' | 'FloralWhite' | 'ForestGreen' | 'Fuchsia' | 'Gainsboro' | 'GhostWhite' | 'Gold' | 'GoldenRod' | 'Gray' | 'Green' | 'GreenYellow' | 'Grey' | 'HoneyDew' | 'HotPink' | 'IndianRed' | 'Indigo' | 'Ivory' | 'Khaki' | 'Lavender' | 'LavenderBlush' | 'LawnGreen' | 'LemonChiffon' | 'LightBlue' | 'LightCoral' | 'LightCyan' | 'LightGoldenRodYellow' | 'LightGray' | 'LightGreen' | 'LightGrey' | 'LightPink' | 'LightSalmon' | 'LightSeaGreen' | 'LightSkyBlue' | 'LightSlateGray' | 'LightSlateGrey' | 'LightSteelBlue' | 'LightYellow' | 'Lime' | 'LimeGreen' | 'Linen' | 'Magenta' | 'Maroon' | 'MediumAquaMarine' | 'MediumBlue' | 'MediumOrchid' | 'MediumPurple' | 'MediumSeaGreen' | 'MediumSlateBlue' | 'MediumSpringGreen' | 'MediumTurquoise' | 'MediumVioletRed' | 'MidnightBlue' | 'MintCream' | 'MistyRose' | 'Moccasin' | 'NavajoWhite' | 'Navy' | 'OldLace' | 'Olive' | 'OliveDrab' | 'Orange' | 'OrangeRed' | 'Orchid' | 'PaleGoldenRod' | 'PaleGreen' | 'PaleTurquoise' | 'PaleVioletRed' | 'PapayaWhip' | 'PeachPuff' | 'Peru' | 'Pink' | 'Plum' | 'PowderBlue' | 'Purple' | 'RebeccaPurple' | 'Red' | 'RosyBrown' | 'RoyalBlue' | 'SaddleBrown' | 'Salmon' | 'SandyBrown' | 'SeaGreen' | 'SeaShell' | 'Sienna' | 'Silver' | 'SkyBlue' | 'SlateBlue' | 'SlateGray' | 'SlateGrey' | 'Snow' | 'SpringGreen' | 'SteelBlue' | 'Tan' | 'Teal' | 'Thistle' | 'Tomato' | 'transparent' | 'Turquoise' | 'Violet' | 'Wheat' | 'White' | 'WhiteSmoke' | 'Yellow' | 'YellowGreen';
    type PageSize = 'A3' | 'A4' | 'A5' | 'B4' | 'B5' | 'JIS-B4' | 'JIS-B5' | 'ledger' | 'legal' | 'letter';
    type Paint = Color | 'child' | 'context-fill' | 'context-stroke' | 'none' | OnlyString;
    type Position = 'bottom' | 'center' | 'left' | 'right' | 'top' | OnlyStringNumeric;
    type Quote = 'close-quote' | 'no-close-quote' | 'no-open-quote' | 'open-quote';
    type RepeatStyle = 'no-repeat' | 'repeat' | 'repeat-x' | 'repeat-y' | 'round' | 'space' | OnlyString;
    type SelfPosition = 'center' | 'end' | 'flex-end' | 'flex-start' | 'self-end' | 'self-start' | 'start';
    type SingleAnimation = EasingFunction | SingleAnimationDirection | SingleAnimationFillMode | 'infinite' | 'none' | 'paused' | 'running' | OnlyString | OnlyNumber;
    type SingleAnimationDirection = 'alternate' | 'alternate-reverse' | 'normal' | 'reverse';
    type SingleAnimationFillMode = 'backwards' | 'both' | 'forwards' | 'none';
    type SingleTransition = EasingFunction | 'all' | 'none' | OnlyString;
    type StepTimingFunction = 'step-end' | 'step-start' | OnlyString;
    type TrackBreadth = 'auto' | 'max-content' | 'min-content' | OnlyStringNumeric;
    type ViewportLength = 'auto' | OnlyStringNumeric;
    type VisualBox = 'border-box' | 'content-box' | 'padding-box';
}
